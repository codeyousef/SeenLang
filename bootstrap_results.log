Fri Aug 15 23:06:52 +03 2025: Starting bootstrap verification
Working directory: /mnt/d/Projects/Rust/seenlang
[0;32m✅ Seen compiler source found[0m
[0;32m✅ Rust bootstrap compiler ready[0m
[0;32m✅ clang compiler available[0m
🧹 Cleaning up previous bootstrap attempts...
[0;34mUsing Rust bootstrap compiler to compile Seen compiler[0m
Command: cargo run -p seen_cli --release -- build compiler_seen/src/main_compiler.seen -o stage1_compiler.c
warning: /mnt/d/Projects/Rust/seenlang/Cargo.toml: `panic` setting is ignored for `bench` profile
warning: /mnt/d/Projects/Rust/seenlang/Cargo.toml: `panic` setting is ignored for `test` profile
warning: unused variable: `pos`
   --> seen_parser/src/parser.rs:435:75
    |
435 |                     else if let Expression::Identifier { name, is_public, pos } = &expr {
    |                                                                           ^^^ help: try ignoring the field: `pos: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `pos`
    --> seen_parser/src/parser.rs:3562:13
     |
3562 |         let pos = self.current.position.clone();
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `pos`
    --> seen_parser/src/parser.rs:3586:13
     |
3586 |         let pos = self.current.position.clone();
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `pos`
    --> seen_parser/src/parser.rs:3708:13
     |
3708 |         let pos = self.current.position.clone();
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: variable does not need to be mutable
    --> seen_parser/src/parser.rs:3891:13
     |
3891 |         let mut iter = arms.into_iter().rev();
     |             ----^^^^
     |             |
     |             help: remove this `mut`
     |
     = note: `#[warn(unused_mut)]` on by default

warning: variants `Statement` and `Expression` are never constructed
  --> seen_parser/src/parser.rs:15:5
   |
13 | enum ParsingContext {
   |      -------------- variants in this enum
14 |     TopLevel,
15 |     Statement,
   |     ^^^^^^^^^
16 |     Expression,
   |     ^^^^^^^^^^
   |
   = note: `ParsingContext` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `parsing_context` is never read
  --> seen_parser/src/parser.rs:23:5
   |
19 | pub struct Parser {
   |            ------ field in this struct
...
23 |     parsing_context: ParsingContext,
   |     ^^^^^^^^^^^^^^^

warning: methods `try_parse_literal`, `is_type_at_lookahead`, `parse_class`, `parse_when`, and `convert_when_to_if_chain` are never used
    --> seen_parser/src/parser.rs:2284:8
     |
26   | impl Parser {
     | ----------- methods in this implementation
...
2284 |     fn try_parse_literal(&mut self) -> ParseResult<Expression> {
     |        ^^^^^^^^^^^^^^^^^
...
2687 |     fn is_type_at_lookahead(&mut self, _distance: usize) -> bool {
     |        ^^^^^^^^^^^^^^^^^^^^
...
3450 |     fn parse_class(&mut self) -> ParseResult<Expression> {
     |        ^^^^^^^^^^^
...
3609 |     fn parse_when(&mut self) -> ParseResult<Expression> {
     |        ^^^^^^^^^^
...
3883 |     fn convert_when_to_if_chain(&self, arms: Vec<MatchArm>, pos: Position) -> ParseResult<Expression> {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^

warning: `seen_parser` (lib) generated 8 warnings (run `cargo fix --lib -p seen_parser` to apply 1 suggestion)
warning: unused import: `seen_parser::ast::Expression`
  --> seen_concurrency/src/async_runtime.rs:13:5
   |
13 | use seen_parser::ast::Expression;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `AsyncResult`
  --> seen_concurrency/src/channels.rs:14:44
   |
14 | use crate::types::{AsyncValue, AsyncError, AsyncResult, ChannelId, TaskId};
   |                                            ^^^^^^^^^^^

warning: unused import: `Condvar`
  --> seen_concurrency/src/actors.rs:11:29
   |
11 | use std::sync::{Arc, Mutex, Condvar};
   |                             ^^^^^^^

warning: unused import: `Duration`
  --> seen_concurrency/src/actors.rs:12:17
   |
12 | use std::time::{Duration, Instant, SystemTime};
   |                 ^^^^^^^^

warning: unused import: `TaskId`
  --> seen_concurrency/src/actors.rs:17:5
   |
17 |     TaskId, TaskPriority, Mailbox
   |     ^^^^^^

warning: unused import: `AsyncResult`
  --> seen_concurrency/src/select.rs:14:40
   |
14 |     ChannelId, AsyncValue, AsyncError, AsyncResult, TaskId
   |                                        ^^^^^^^^^^^

warning: unused variable: `runtime`
  --> seen_concurrency/src/async_functions.rs:92:9
   |
92 |         runtime: &mut AsyncRuntime,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_runtime`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `name`
   --> seen_concurrency/src/async_functions.rs:239:41
    |
239 |             Expression::StructLiteral { name, fields, .. } => {
    |                                         ^^^^-
    |                                         |
    |                                         help: try removing the field

warning: unused variable: `expr`
   --> seen_concurrency/src/async_functions.rs:340:9
    |
340 |         expr: &Expression,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_expr`

warning: unused variable: `task_id`
   --> seen_concurrency/src/async_runtime.rs:290:28
    |
290 |     fn create_waker(&self, task_id: TaskId) -> Waker {
    |                            ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_task_id`

warning: unused variable: `pattern`
   --> seen_concurrency/src/channels.rs:485:51
    |
485 |                 SelectCase::Receive { channel_id, pattern } => {
    |                                                   ^^^^^^^ help: try ignoring the field: `pattern: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/channels.rs:486:33
    |
486 |                     if let Some(channel) = self.channels.get(channel_id) {
    |                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `value`
   --> seen_concurrency/src/channels.rs:492:48
    |
492 |                 SelectCase::Send { channel_id, value } => {
    |                                                ^^^^^ help: try ignoring the field: `value: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/channels.rs:493:33
    |
493 |                     if let Some(channel) = self.channels.get(channel_id) {
    |                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `channel_type`
   --> seen_concurrency/src/channels.rs:560:5
    |
560 |     channel_type: &Type,
    |     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel_type`

warning: unused variable: `handler_result`
   --> seen_concurrency/src/actors.rs:368:13
    |
368 |         let handler_result: AsyncResult = match &handler.handler {
    |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler_result`

warning: unused variable: `payload`
   --> seen_concurrency/src/actors.rs:532:70
    |
532 |     pub fn send_message(&mut self, target: ActorId, message: String, payload: AsyncValue) -> Result<(), AsyncError> {
    |                                                                      ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_payload`

warning: unused variable: `payload`
   --> seen_concurrency/src/actors.rs:548:9
    |
548 |         payload: AsyncValue,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_payload`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:115:9
    |
115 |         handler: Expression,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: unused variable: `position`
   --> seen_concurrency/src/select.rs:116:9
    |
116 |         position: Position,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_position`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:130:9
    |
130 |         handler: Expression,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: unused variable: `position`
   --> seen_concurrency/src/select.rs:131:9
    |
131 |         position: Position,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_position`

warning: unused variable: `pattern`
   --> seen_concurrency/src/select.rs:300:47
    |
300 |             SelectCase::Receive { channel_id, pattern } => {
    |                                               ^^^^^^^ help: try ignoring the field: `pattern: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/select.rs:302:29
    |
302 |                 if let Some(channel) = self.channel_manager.get_channel(*channel_id) {
    |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `value`
   --> seen_concurrency/src/select.rs:310:44
    |
310 |             SelectCase::Send { channel_id, value } => {
    |                                            ^^^^^ help: try ignoring the field: `value: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/select.rs:312:29
    |
312 |                 if let Some(channel) = self.channel_manager.get_channel(*channel_id) {
    |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `duration`
   --> seen_concurrency/src/select.rs:320:35
    |
320 |             SelectCase::Timeout { duration } => {
    |                                   ^^^^^^^^ help: try ignoring the field: `duration: _`

warning: unused variable: `receiver`
   --> seen_concurrency/src/select.rs:408:22
    |
408 |         let (sender, receiver) = self.channel_manager.create_channel::<T>(capacity);
    |                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_receiver`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:445:13
    |
445 |             handler: Expression,
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:459:13
    |
459 |             handler: Expression,
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: fields `sender_count` and `receiver_count` are never read
  --> seen_concurrency/src/channels.rs:30:5
   |
18 | pub struct Channel<T> {
   |            ------- fields in this struct
...
30 |     sender_count: Arc<Mutex<usize>>,
   |     ^^^^^^^^^^^^
31 |     /// Number of active receivers
32 |     receiver_count: Arc<Mutex<usize>>,
   |     ^^^^^^^^^^^^^^
   |
   = note: `Channel` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `next_channel_id` is never read
   --> seen_concurrency/src/channels.rs:101:5
    |
97  | pub struct ChannelManager {
    |            -------------- field in this struct
...
101 |     next_channel_id: u64,
    |     ^^^^^^^^^^^^^^^
    |
    = note: `ChannelManager` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `system_supervisor` is never read
   --> seen_concurrency/src/actors.rs:172:5
    |
164 | pub struct ActorSystem {
    |            ----------- field in this struct
...
172 |     system_supervisor: Option<ActorId>,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `ActorSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: unreachable pattern
   --> seen_typechecker/src/checker.rs:246:13
    |
222 |             Expression::StructLiteral { name, fields, pos } => {
    |             ----------------------------------------------- matches all the relevant values
...
246 |             Expression::StructLiteral { name, fields, pos } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `pos`
   --> seen_typechecker/src/checker.rs:831:87
    |
831 |     fn check_interface_definition(&mut self, name: &str, methods: &[InterfaceMethod], pos: Position) -> Type {
    |                                                                                       ^^^ help: if this is intentional, prefix it with an underscore: `_pos`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `then_branch`
   --> seen_typechecker/src/smart_cast.rs:139:44
    |
139 |         if let Expression::If { condition, then_branch, else_branch, .. } = if_expr {
    |                                            ^^^^^^^^^^^-
    |                                            |
    |                                            help: try removing the field

warning: methods `remove_smart_cast` and `with_smart_casts` are never used
   --> seen_typechecker/src/checker.rs:99:8
    |
25  | impl Environment {
    | ---------------- methods in this implementation
...
99  |     fn remove_smart_cast(&mut self, name: &str) {
    |        ^^^^^^^^^^^^^^^^^
...
104 |     fn with_smart_casts(&self) -> Environment {
    |        ^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: unused imports: `Any` and `TypeId`
  --> seen_effects/src/effects.rs:12:16
   |
12 | use std::any::{Any, TypeId};
   |                ^^^  ^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Expression`
  --> seen_effects/src/effects.rs:14:24
   |
14 | use seen_parser::ast::{Expression, Type};
   |                        ^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_effects/src/contracts.rs:11:17
   |
11 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: unused import: `Type`
  --> seen_effects/src/contracts.rs:14:36
   |
14 | use seen_parser::ast::{Expression, Type, BinaryOperator};
   |                                    ^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_effects/src/metaprogramming.rs:11:17
   |
11 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: unused imports: `Any` and `TypeId`
  --> seen_effects/src/metaprogramming.rs:12:16
   |
12 | use std::any::{Any, TypeId};
   |                ^^^  ^^^^^^

warning: unused import: `Type`
  --> seen_effects/src/metaprogramming.rs:15:36
   |
15 | use seen_parser::ast::{Expression, Type};
   |                                    ^^^^

warning: unused imports: `AsyncError`, `AsyncResult`, and `AsyncValue`
  --> seen_effects/src/metaprogramming.rs:16:20
   |
16 | use crate::types::{AsyncValue, AsyncError, AsyncResult};
   |                    ^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_effects/src/lib.rs:25:17
   |
25 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: fields `next_effect_id` and `next_operation_id` are never read
   --> seen_effects/src/effects.rs:306:5
    |
298 | pub struct EffectSystem {
    |            ------------ fields in this struct
...
306 |     next_effect_id: u64,
    |     ^^^^^^^^^^^^^^
307 |     /// Next available operation ID
308 |     next_operation_id: u64,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `EffectSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
    = note: `#[warn(dead_code)]` on by default

warning: fields `next_contract_id`, `next_precondition_id`, `next_postcondition_id`, and `next_invariant_id` are never read
   --> seen_effects/src/contracts.rs:304:5
    |
294 | pub struct ContractSystem {
    |            -------------- fields in this struct
...
304 |     next_contract_id: u64,
    |     ^^^^^^^^^^^^^^^^
305 |     next_precondition_id: u64,
    |     ^^^^^^^^^^^^^^^^^^^^
306 |     next_postcondition_id: u64,
    |     ^^^^^^^^^^^^^^^^^^^^^
307 |     next_invariant_id: u64,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `ContractSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `next_macro_id` and `next_template_id` are never read
   --> seen_effects/src/metaprogramming.rs:412:5
    |
399 | pub struct MetaprogrammingSystem {
    |            --------------------- fields in this struct
...
412 |     next_macro_id: u64,
    |     ^^^^^^^^^^^^^
413 |     next_template_id: u64,
    |     ^^^^^^^^^^^^^^^^
    |
    = note: `MetaprogrammingSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: unused import: `Label`
 --> seen_ir/src/function.rs:6:56
  |
6 | use crate::instruction::{BasicBlock, ControlFlowGraph, Label};
  |                                                        ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `IRValue`
   --> seen_ir/src/function.rs:266:34
    |
266 |         use crate::{Instruction, IRValue};
    |                                  ^^^^^^^

warning: unused imports: `BasicBlock` and `Parameter`
  --> seen_ir/src/generator.rs:9:32
   |
9  |     instruction::{Instruction, BasicBlock, Label, BinaryOp, UnaryOp},
   |                                ^^^^^^^^^^
10 |     function::{IRFunction, Parameter},
   |                            ^^^^^^^^^

warning: unused imports: `BasicBlock` and `IRType`
 --> seen_ir/src/optimizer.rs:6:32
  |
6 |     instruction::{Instruction, BasicBlock, BinaryOp, UnaryOp},
  |                                ^^^^^^^^^^
7 |     value::{IRValue, IRType},
  |                      ^^^^^^

warning: unused import: `std::collections::HashMap`
 --> seen_ir/src/cfg_builder.rs:4:5
  |
4 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `UnaryOp`
 --> seen_ir/src/simple_codegen.rs:7:54
  |
7 |     instruction::{Instruction, BasicBlock, BinaryOp, UnaryOp},
  |                                                      ^^^^^^^

warning: unused variable: `name`
   --> seen_ir/src/value.rs:197:33
    |
197 |             IRValue::Function { name, parameters } => {
    |                                 ^^^^ help: try ignoring the field: `name: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `ensures`
   --> seen_ir/src/generator.rs:175:70
    |
175 |                 Expression::ContractedFunction { function, requires, ensures, invariants, .. } => {
    |                                                                      ^^^^^^^-
    |                                                                      |
    |                                                                      help: try removing the field

warning: unused variable: `invariants`
   --> seen_ir/src/generator.rs:175:79
    |
175 |                 Expression::ContractedFunction { function, requires, ensures, invariants, .. } => {
    |                                                                               ^^^^^^^^^^-
    |                                                                               |
    |                                                                               help: try removing the field

warning: unused variable: `contract_body`
   --> seen_ir/src/generator.rs:180:33
    |
180 |                         let mut contract_body: Vec<Instruction> = Vec::new();
    |                                 ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_contract_body`

warning: variable does not need to be mutable
   --> seen_ir/src/generator.rs:180:29
    |
180 |                         let mut contract_body: Vec<Instruction> = Vec::new();
    |                             ----^^^^^^^^^^^^^
    |                             |
    |                             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `reference_type`
    --> seen_ir/src/generator.rs:1104:13
     |
1104 |         let reference_type = IRType::Pointer(Box::new(source_type));
     |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_reference_type`

warning: unused variable: `receiver_type`
    --> seen_ir/src/generator.rs:1320:13
     |
1320 |         let receiver_type = if !params.is_empty() {
     |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_receiver_type`

warning: unused variable: `body_value`
    --> seen_ir/src/generator.rs:1354:14
     |
1354 |         let (body_value, body_instructions) = self.generate_expression(body)?;
     |              ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_body_value`

warning: unused variable: `extract_label`
    --> seen_ir/src/generator.rs:1522:29
     |
1522 |                         let extract_label = self.context.create_label("extract_fields");
     |                             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_extract_label`

warning: unused variable: `finish_current_block`
  --> seen_ir/src/cfg_builder.rs:18:9
   |
18 |     let finish_current_block = |current_block: Option<BasicBlock>, cfg: &mut ControlFlowGraph| {
   |         ^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_finish_current_block`

warning: unreachable pattern
   --> seen_ir/src/simple_codegen.rs:369:21
    |
369 |                     _ => return Err(CodeGenError::UnsupportedInstruction(format!("Binary op: {:?}", op))),
    |                     ^ no value can reach this
    |
note: multiple earlier patterns match some of the same values
   --> seen_ir/src/simple_codegen.rs:369:21
    |
351 |                     BinaryOp::Add => "+",
    |                     ------------- matches some of the same values
352 |                     BinaryOp::Subtract => "-",
    |                     ------------------ matches some of the same values
353 |                     BinaryOp::Multiply => "*",
    |                     ------------------ matches some of the same values
354 |                     BinaryOp::Divide => "/",
    |                     ---------------- matches some of the same values
...
369 |                     _ => return Err(CodeGenError::UnsupportedInstruction(format!("Binary op: {:?}", op))),
    |                     ^ ...and 14 other patterns collectively make this unreachable
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `left`
   --> seen_ir/src/simple_codegen.rs:762:78
    |
762 |                 Instruction::Binary { op: crate::instruction::BinaryOp::Add, left, right: IRValue::Integer(1), .. }
    |                                                                              ^^^^ help: try ignoring the field: `left: _`

warning: unused variable: `terminator`
   --> seen_ir/src/simple_codegen.rs:722:73
    |
722 |     fn generate_for_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
    |                                                                         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_terminator`

warning: unused variable: `terminator`
   --> seen_ir/src/simple_codegen.rs:833:75
    |
833 |     fn generate_while_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
    |                                                                           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_terminator`

warning: methods `optimize_loop_invariants` and `optimize_loop_unrolling` are never used
   --> seen_ir/src/optimizer.rs:434:8
    |
58  | impl IROptimizer {
    | ---------------- methods in this implementation
...
434 |     fn optimize_loop_invariants(&mut self, _function: &mut IRFunction) -> IRResult<()> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
...
448 |     fn optimize_loop_unrolling(&mut self, _function: &mut IRFunction) -> IRResult<()> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: methods `generate_for_loop_block`, `generate_while_loop_block`, `generate_if_else_block`, `count_if_else_instructions`, `find_result_assignment`, and `find_result_variable` are never used
    --> seen_ir/src/simple_codegen.rs:722:8
     |
78   | impl CCodeGenerator {
     | ------------------- methods in this implementation
...
722  |     fn generate_for_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
     |        ^^^^^^^^^^^^^^^^^^^^^^^
...
833  |     fn generate_while_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^
...
925  |     fn generate_if_else_block(&self, instructions: &[Instruction]) -> Result<Option<String>> {
     |        ^^^^^^^^^^^^^^^^^^^^^^
...
1019 |     fn count_if_else_instructions(&self, instructions: &[Instruction]) -> usize {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1041 |     fn find_result_assignment(&self, instructions: &[Instruction]) -> Option<IRValue> {
     |        ^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     fn find_result_variable(&self, instructions: &[Instruction]) -> Result<String> {
     |        ^^^^^^^^^^^^^^^^^^^^

warning: `seen_concurrency` (lib) generated 33 warnings (run `cargo fix --lib -p seen_concurrency` to apply 7 suggestions)
warning: `seen_typechecker` (lib) generated 4 warnings (run `cargo fix --lib -p seen_typechecker` to apply 1 suggestion)
warning: `seen_effects` (lib) generated 12 warnings (run `cargo fix --lib -p seen_effects` to apply 9 suggestions)
warning: `seen_ir` (lib) generated 22 warnings (run `cargo fix --lib -p seen_ir` to apply 9 suggestions)
warning: unused import: `std::collections::HashMap`
 --> seen_memory_manager/src/memory_manager.rs:7:5
  |
7 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `OwnershipError`
  --> seen_memory_manager/src/regions.rs:10:39
   |
10 | use crate::ownership::{OwnershipInfo, OwnershipError};
   |                                       ^^^^^^^^^^^^^^

warning: unused variable: `result`
   --> seen_memory_manager/src/memory_manager.rs:382:33
    |
382 |     fn check_double_free(&self, result: &mut MemoryAnalysisResult) {
    |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `var_name`
   --> seen_memory_manager/src/memory_manager.rs:391:14
    |
391 |         for (var_name, var_info) in &result.ownership_info.variables {
    |              ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_var_name`

warning: unused variable: `pos`
   --> seen_memory_manager/src/regions.rs:413:44
    |
413 |             Expression::Let { name, value, pos, .. } => {
    |                                            ^^^-
    |                                            |
    |                                            help: try removing the field

warning: field `ownership_info` is never read
   --> seen_memory_manager/src/regions.rs:374:5
    |
370 | pub struct RegionAnalyzer {
    |            -------------- field in this struct
...
374 |     ownership_info: Option<OwnershipInfo>,
    |     ^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: unused import: `Duration`
  --> seen_reactive/src/observable.rs:10:17
   |
10 | use std::time::{Duration, Instant};
   |                 ^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `futures::stream::Stream`
  --> seen_reactive/src/observable.rs:11:5
   |
11 | use futures::stream::Stream;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Weak`
  --> seen_reactive/src/properties.rs:10:29
   |
10 | use std::sync::{Arc, Mutex, Weak};
   |                             ^^^^

warning: unused import: `std::any::Any`
  --> seen_reactive/src/properties.rs:12:5
   |
12 | use std::any::Any;
   |     ^^^^^^^^^^^^^

warning: unused imports: `ObservableId` and `Observable`
  --> seen_reactive/src/properties.rs:16:25
   |
16 | use crate::observable::{Observable, ObservableId};
   |                         ^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> seen_reactive/src/flow.rs:10:5
   |
10 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Context` and `Poll`
  --> seen_reactive/src/flow.rs:11:17
   |
11 | use std::task::{Context, Poll};
   |                 ^^^^^^^  ^^^^

warning: unused import: `futures::Stream`
  --> seen_reactive/src/flow.rs:12:5
   |
12 | use futures::Stream;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `seen_concurrency::types::*`
  --> seen_reactive/src/flow.rs:13:5
   |
13 | use seen_concurrency::types::*;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_reactive/src/lib.rs:20:17
   |
20 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: unused import: `AsyncResult`
  --> seen_reactive/src/lib.rs:22:55
   |
22 | use seen_concurrency::types::{AsyncValue, AsyncError, AsyncResult};
   |                                                       ^^^^^^^^^^^

warning: unused import: `std::time::Duration`
   --> seen_reactive/src/lib.rs:223:9
    |
223 |     use std::time::Duration;
    |         ^^^^^^^^^^^^^^^^^^^

warning: unused variable: `interval`
   --> seen_reactive/src/flow.rs:186:18
    |
186 |     pub fn timer(interval: Duration, max_count: Option<usize>) -> Flow<u64> {
    |                  ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_interval`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: fields `flows` and `config` are never read
  --> seen_reactive/src/lib.rs:32:5
   |
26 | pub struct ReactiveRuntime {
   |            --------------- fields in this struct
...
32 |     flows: HashMap<flow::FlowId, Box<dyn std::any::Any + Send>>,
   |     ^^^^^
33 |     /// Runtime configuration
34 |     config: ReactiveRuntimeConfig,
   |     ^^^^^^
   |
   = note: `ReactiveRuntime` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `next_id` is never read
   --> seen_reactive/src/observable.rs:246:5
    |
244 | pub struct ObservableFactory {
    |            ----------------- field in this struct
245 |     /// Next observable ID
246 |     next_id: u64,
    |     ^^^^^^^
    |
    = note: `ObservableFactory` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `property_type` is never read
  --> seen_reactive/src/properties.rs:71:5
   |
57 | pub struct ComputedProperty {
   |            ---------------- field in this struct
...
71 |     property_type: Type,
   |     ^^^^^^^^^^^^^
   |
   = note: `ComputedProperty` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `next_property_id` and `next_observer_id` are never read
   --> seen_reactive/src/properties.rs:197:5
    |
189 | pub struct ReactivePropertyManager {
    |            ----------------------- fields in this struct
...
197 |     next_property_id: u64,
    |     ^^^^^^^^^^^^^^^^
198 |     /// Next available observer ID
199 |     next_observer_id: u64,
    |     ^^^^^^^^^^^^^^^^
    |
    = note: `ReactivePropertyManager` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `next_id` is never read
   --> seen_reactive/src/flow.rs:151:5
    |
149 | pub struct FlowFactory {
    |            ----------- field in this struct
150 |     /// Next flow ID
151 |     next_id: FlowId,
    |     ^^^^^^^
    |
    = note: `FlowFactory` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: `seen_memory_manager` (lib) generated 6 warnings (run `cargo fix --lib -p seen_memory_manager` to apply 3 suggestions)
warning: `seen_reactive` (lib) generated 18 warnings (run `cargo fix --lib -p seen_reactive` to apply 12 suggestions)
warning: unused imports: `Deserialize` and `Serialize`
 --> seen_interpreter/src/value.rs:5:13
  |
5 | use serde::{Serialize, Deserialize};
  |             ^^^^^^^^^  ^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Flow`, `Observable`, and `ReactiveProperty`
 --> seen_interpreter/src/value.rs:8:21
  |
8 | use seen_reactive::{Observable, Flow, ReactiveProperty};
  |                     ^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^^^^

warning: unused imports: `ActorRef`, `Promise`, and `TaskId`
 --> seen_interpreter/src/interpreter.rs:7:13
  |
7 |     types::{Promise, TaskPriority, AsyncValue, TaskId, ActorRef, AsyncError, AsyncResult},
  |             ^^^^^^^                            ^^^^^^  ^^^^^^^^

warning: unused imports: `Flow`, `Observable`, `ReactiveProperty`, and `properties::PropertyId`
  --> seen_interpreter/src/interpreter.rs:18:5
   |
18 |     Observable, Flow, ReactiveProperty,
   |     ^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^^^^
19 |     properties::PropertyId,
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:474:13
    |
130 |             Expression::FloatLiteral { value, .. } => Ok(Value::Float(*value)),
    |             -------------------------------------- matches all the relevant values
...
474 |             Expression::FloatLiteral { value, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:478:13
    |
385 |             Expression::InterpolatedString { parts, .. } => {
    |             -------------------------------------------- matches all the relevant values
...
478 |             Expression::InterpolatedString { parts, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:492:13
    |
153 |             Expression::UnaryOp { op, operand, pos } => {
    |             ---------------------------------------- matches all the relevant values
...
492 |             Expression::UnaryOp { op, operand, pos } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:504:13
    |
389 |             Expression::Elvis { nullable, default, .. } => {
    |             ------------------------------------------- matches all the relevant values
...
504 |             Expression::Elvis { nullable, default, pos } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:513:13
    |
305 |             Expression::IndexAccess { object, index, pos } => {
    |             ---------------------------------------------- matches all the relevant values
...
513 |             Expression::IndexAccess { object, index, pos, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:535:13
    |
286 |             Expression::Lambda { params, body, .. } => {
    |             --------------------------------------- matches all the relevant values
...
535 |             Expression::Lambda { params, body, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: value assigned to `last_value` is never read
   --> seen_interpreter/src/interpreter.rs:201:25
    |
201 |                 let mut last_value = Value::Unit;
    |                         ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `pos`
   --> seen_interpreter/src/interpreter.rs:433:56
    |
433 |             Expression::Receive { pattern: _, handler, pos } => {
    |                                                        ^^^ help: try ignoring the field: `pos: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `pos`
   --> seen_interpreter/src/interpreter.rs:504:52
    |
504 |             Expression::Elvis { nullable, default, pos } => {
    |                                                    ^^^ help: try ignoring the field: `pos: _`

warning: unused variable: `pos`
   --> seen_interpreter/src/interpreter.rs:546:61
    |
546 |             Expression::Try { body, catch_clauses, finally, pos, .. } => {
    |                                                             ^^^-
    |                                                             |
    |                                                             help: try removing the field

warning: unused variable: `promise`
   --> seen_interpreter/src/interpreter.rs:904:28
    |
904 |             Value::Promise(promise) => {
    |                            ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_promise`

warning: unused variable: `task_id`
   --> seen_interpreter/src/interpreter.rs:919:25
    |
919 |             Value::Task(task_id) => {
    |                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_task_id`

warning: unused variable: `actor_system`
    --> seen_interpreter/src/interpreter.rs:1076:13
     |
1076 |         let actor_system = self.runtime.actor_system();
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_actor_system`

warning: unused variable: `pos`
    --> seen_interpreter/src/interpreter.rs:1071:104
     |
1071 | ...ring, seen_parser::ast::Type)], pos: Position) -> InterpreterResult<Value> {
     |                                    ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `advanced_runtime`
    --> seen_interpreter/src/interpreter.rs:1201:13
     |
1201 |         let advanced_runtime = self.runtime.advanced_runtime();
     |             ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_advanced_runtime`

warning: unused variable: `effect_handle`
    --> seen_interpreter/src/interpreter.rs:1227:13
     |
1227 |         let effect_handle = Value::EffectHandle {
     |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_effect_handle`

warning: unused variable: `effect`
    --> seen_interpreter/src/interpreter.rs:1208:55
     |
1208 |     fn interpret_handle(&mut self, body: &Expression, effect: &str, handlers: &[seen_parser::ast::EffectHandler], pos: Position) -> Inter...
     |                                                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_effect`

warning: unused variable: `pos`
    --> seen_interpreter/src/interpreter.rs:1208:115
     |
1208 | ...en_parser::ast::EffectHandler], pos: Position) -> InterpreterResult<Value> {
     |                                    ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `pos`
    --> seen_interpreter/src/interpreter.rs:1328:62
     |
1328 |     fn interpret_flow_creation(&mut self, body: &Expression, pos: Position) -> InterpreterResult<Value> {
     |                                                              ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `obs`
    --> seen_interpreter/src/interpreter.rs:1395:31
     |
1395 |             Value::Observable(obs) => {
     |                               ^^^ help: if this is intentional, prefix it with an underscore: `_obs`

warning: field `is_function_scope` is never read
  --> seen_interpreter/src/runtime.rs:41:5
   |
38 | pub struct Environment {
   |            ----------- field in this struct
...
41 |     is_function_scope: bool,
   |     ^^^^^^^^^^^^^^^^^
   |
   = note: `Environment` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `task_counter` is never read
  --> seen_interpreter/src/interpreter.rs:84:5
   |
72 | pub struct Interpreter {
   |            ----------- field in this struct
...
84 |     task_counter: std::sync::atomic::AtomicU64,
   |     ^^^^^^^^^^^^

warning: `seen_interpreter` (lib) generated 26 warnings (run `cargo fix --lib -p seen_interpreter` to apply 5 suggestions)
warning: unused variable: `uri`
  --> seen_lsp/src/lib.rs:75:38
   |
75 |     async fn analyze_document(&self, uri: &Url, content: &str) -> Vec<Diagnostic> {
   |                                      ^^^ help: if this is intentional, prefix it with an underscore: `_uri`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `language`
  --> seen_lsp/src/lib.rs:79:13
   |
79 |         let language = self.language_config.read().await.clone();
   |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_language`

warning: variable does not need to be mutable
  --> seen_lsp/src/lib.rs:83:13
   |
83 |         let mut lexer = Lexer::new(content.to_string(), keyword_manager);
   |             ----^^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: use of deprecated field `tower_lsp::lsp_types::SymbolInformation::deprecated`: Use tags instead
   --> seen_lsp/src/lib.rs:997:21
    |
997 |                     deprecated: None,
    |                     ^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: variable does not need to be mutable
   --> seen_lsp/src/lib.rs:707:13
    |
707 |         let mut lexer = Lexer::new(content.clone(), keyword_manager);
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> seen_lsp/src/lib.rs:750:17
    |
750 |             let mut lexer = Lexer::new(content.clone(), keyword_manager);
    |                 ----^^^^^
    |                 |
    |                 help: remove this `mut`

warning: field `references` is never read
  --> seen_lsp/src/lib.rs:31:5
   |
23 | struct SymbolInfo {
   |        ---------- field in this struct
...
31 |     references: Vec<Location>,
   |     ^^^^^^^^^^
   |
   = note: `SymbolInfo` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `type_info` is never read
  --> seen_lsp/src/lib.rs:44:5
   |
36 | struct DocumentInfo {
   |        ------------ field in this struct
...
44 |     type_info: Option<TypeCheckResult>,
   |     ^^^^^^^^^
   |
   = note: `DocumentInfo` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `global_symbols` is never read
  --> seen_lsp/src/lib.rs:60:5
   |
52 | pub struct SeenLanguageServer {
   |            ------------------ field in this struct
...
60 |     global_symbols: Arc<RwLock<HashMap<String, Vec<SymbolInfo>>>>,
   |     ^^^^^^^^^^^^^^

warning: `seen_lsp` (lib) generated 9 warnings (run `cargo fix --lib -p seen_lsp` to apply 3 suggestions)
warning: unused variable: `program`
   --> seen_cli/src/main.rs:962:75
    |
962 | fn run_single_test(interpreter: &mut Interpreter, test_func: &Expression, program: &Program) -> Result<()> {
    |                                                                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_program`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: `seen_cli` (bin "seen_cli") generated 1 warning
    Finished `release` profile [optimized] target(s) in 3.00s
     Running `target/release/seen_cli build compiler_seen/src/main_compiler.seen -o stage1_compiler.c`
Compiling compiler_seen/src/main_compiler.seen with optimization level 0
Error: Failed to parse source

Caused by:
    Unexpected token: found EOF, expected end of expression
[0;31m❌ STAGE 1 FAILED: No C code generated[0m
Fri Aug 15 23:07:24 +03 2025: Starting bootstrap verification
Working directory: /mnt/d/Projects/Rust/seenlang
[0;32m✅ Seen compiler source found[0m
[0;32m✅ Rust bootstrap compiler ready[0m
[0;32m✅ clang compiler available[0m
🧹 Cleaning up previous bootstrap attempts...
[0;34mUsing Rust bootstrap compiler to compile Seen compiler[0m
Command: cargo run -p seen_cli --release -- build compiler_seen/src/main_compiler.seen -o stage1_compiler.c
warning: /mnt/d/Projects/Rust/seenlang/Cargo.toml: `panic` setting is ignored for `bench` profile
warning: /mnt/d/Projects/Rust/seenlang/Cargo.toml: `panic` setting is ignored for `test` profile
warning: unused variable: `pos`
   --> seen_parser/src/parser.rs:435:75
    |
435 |                     else if let Expression::Identifier { name, is_public, pos } = &expr {
    |                                                                           ^^^ help: try ignoring the field: `pos: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `pos`
    --> seen_parser/src/parser.rs:3562:13
     |
3562 |         let pos = self.current.position.clone();
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `pos`
    --> seen_parser/src/parser.rs:3586:13
     |
3586 |         let pos = self.current.position.clone();
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `pos`
    --> seen_parser/src/parser.rs:3708:13
     |
3708 |         let pos = self.current.position.clone();
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: variable does not need to be mutable
    --> seen_parser/src/parser.rs:3891:13
     |
3891 |         let mut iter = arms.into_iter().rev();
     |             ----^^^^
     |             |
     |             help: remove this `mut`
     |
     = note: `#[warn(unused_mut)]` on by default

warning: variants `Statement` and `Expression` are never constructed
  --> seen_parser/src/parser.rs:15:5
   |
13 | enum ParsingContext {
   |      -------------- variants in this enum
14 |     TopLevel,
15 |     Statement,
   |     ^^^^^^^^^
16 |     Expression,
   |     ^^^^^^^^^^
   |
   = note: `ParsingContext` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `parsing_context` is never read
  --> seen_parser/src/parser.rs:23:5
   |
19 | pub struct Parser {
   |            ------ field in this struct
...
23 |     parsing_context: ParsingContext,
   |     ^^^^^^^^^^^^^^^

warning: methods `try_parse_literal`, `is_type_at_lookahead`, `parse_class`, `parse_when`, and `convert_when_to_if_chain` are never used
    --> seen_parser/src/parser.rs:2284:8
     |
26   | impl Parser {
     | ----------- methods in this implementation
...
2284 |     fn try_parse_literal(&mut self) -> ParseResult<Expression> {
     |        ^^^^^^^^^^^^^^^^^
...
2687 |     fn is_type_at_lookahead(&mut self, _distance: usize) -> bool {
     |        ^^^^^^^^^^^^^^^^^^^^
...
3450 |     fn parse_class(&mut self) -> ParseResult<Expression> {
     |        ^^^^^^^^^^^
...
3609 |     fn parse_when(&mut self) -> ParseResult<Expression> {
     |        ^^^^^^^^^^
...
3883 |     fn convert_when_to_if_chain(&self, arms: Vec<MatchArm>, pos: Position) -> ParseResult<Expression> {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^

warning: `seen_parser` (lib) generated 8 warnings (run `cargo fix --lib -p seen_parser` to apply 1 suggestion)
warning: unused import: `seen_parser::ast::Expression`
  --> seen_concurrency/src/async_runtime.rs:13:5
   |
13 | use seen_parser::ast::Expression;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `AsyncResult`
  --> seen_concurrency/src/channels.rs:14:44
   |
14 | use crate::types::{AsyncValue, AsyncError, AsyncResult, ChannelId, TaskId};
   |                                            ^^^^^^^^^^^

warning: unused import: `Condvar`
  --> seen_concurrency/src/actors.rs:11:29
   |
11 | use std::sync::{Arc, Mutex, Condvar};
   |                             ^^^^^^^

warning: unused import: `Duration`
  --> seen_concurrency/src/actors.rs:12:17
   |
12 | use std::time::{Duration, Instant, SystemTime};
   |                 ^^^^^^^^

warning: unused import: `TaskId`
  --> seen_concurrency/src/actors.rs:17:5
   |
17 |     TaskId, TaskPriority, Mailbox
   |     ^^^^^^

warning: unused import: `AsyncResult`
  --> seen_concurrency/src/select.rs:14:40
   |
14 |     ChannelId, AsyncValue, AsyncError, AsyncResult, TaskId
   |                                        ^^^^^^^^^^^

warning: unused variable: `runtime`
  --> seen_concurrency/src/async_functions.rs:92:9
   |
92 |         runtime: &mut AsyncRuntime,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_runtime`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `name`
   --> seen_concurrency/src/async_functions.rs:239:41
    |
239 |             Expression::StructLiteral { name, fields, .. } => {
    |                                         ^^^^-
    |                                         |
    |                                         help: try removing the field

warning: unused variable: `expr`
   --> seen_concurrency/src/async_functions.rs:340:9
    |
340 |         expr: &Expression,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_expr`

warning: unused variable: `task_id`
   --> seen_concurrency/src/async_runtime.rs:290:28
    |
290 |     fn create_waker(&self, task_id: TaskId) -> Waker {
    |                            ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_task_id`

warning: unused variable: `pattern`
   --> seen_concurrency/src/channels.rs:485:51
    |
485 |                 SelectCase::Receive { channel_id, pattern } => {
    |                                                   ^^^^^^^ help: try ignoring the field: `pattern: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/channels.rs:486:33
    |
486 |                     if let Some(channel) = self.channels.get(channel_id) {
    |                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `value`
   --> seen_concurrency/src/channels.rs:492:48
    |
492 |                 SelectCase::Send { channel_id, value } => {
    |                                                ^^^^^ help: try ignoring the field: `value: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/channels.rs:493:33
    |
493 |                     if let Some(channel) = self.channels.get(channel_id) {
    |                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `channel_type`
   --> seen_concurrency/src/channels.rs:560:5
    |
560 |     channel_type: &Type,
    |     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel_type`

warning: unused variable: `handler_result`
   --> seen_concurrency/src/actors.rs:368:13
    |
368 |         let handler_result: AsyncResult = match &handler.handler {
    |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler_result`

warning: unused variable: `payload`
   --> seen_concurrency/src/actors.rs:532:70
    |
532 |     pub fn send_message(&mut self, target: ActorId, message: String, payload: AsyncValue) -> Result<(), AsyncError> {
    |                                                                      ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_payload`

warning: unused variable: `payload`
   --> seen_concurrency/src/actors.rs:548:9
    |
548 |         payload: AsyncValue,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_payload`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:115:9
    |
115 |         handler: Expression,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: unused variable: `position`
   --> seen_concurrency/src/select.rs:116:9
    |
116 |         position: Position,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_position`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:130:9
    |
130 |         handler: Expression,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: unused variable: `position`
   --> seen_concurrency/src/select.rs:131:9
    |
131 |         position: Position,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_position`

warning: unused variable: `pattern`
   --> seen_concurrency/src/select.rs:300:47
    |
300 |             SelectCase::Receive { channel_id, pattern } => {
    |                                               ^^^^^^^ help: try ignoring the field: `pattern: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/select.rs:302:29
    |
302 |                 if let Some(channel) = self.channel_manager.get_channel(*channel_id) {
    |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `value`
   --> seen_concurrency/src/select.rs:310:44
    |
310 |             SelectCase::Send { channel_id, value } => {
    |                                            ^^^^^ help: try ignoring the field: `value: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/select.rs:312:29
    |
312 |                 if let Some(channel) = self.channel_manager.get_channel(*channel_id) {
    |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `duration`
   --> seen_concurrency/src/select.rs:320:35
    |
320 |             SelectCase::Timeout { duration } => {
    |                                   ^^^^^^^^ help: try ignoring the field: `duration: _`

warning: unused variable: `receiver`
   --> seen_concurrency/src/select.rs:408:22
    |
408 |         let (sender, receiver) = self.channel_manager.create_channel::<T>(capacity);
    |                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_receiver`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:445:13
    |
445 |             handler: Expression,
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:459:13
    |
459 |             handler: Expression,
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: fields `sender_count` and `receiver_count` are never read
  --> seen_concurrency/src/channels.rs:30:5
   |
18 | pub struct Channel<T> {
   |            ------- fields in this struct
...
30 |     sender_count: Arc<Mutex<usize>>,
   |     ^^^^^^^^^^^^
31 |     /// Number of active receivers
32 |     receiver_count: Arc<Mutex<usize>>,
   |     ^^^^^^^^^^^^^^
   |
   = note: `Channel` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `next_channel_id` is never read
   --> seen_concurrency/src/channels.rs:101:5
    |
97  | pub struct ChannelManager {
    |            -------------- field in this struct
...
101 |     next_channel_id: u64,
    |     ^^^^^^^^^^^^^^^
    |
    = note: `ChannelManager` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `system_supervisor` is never read
   --> seen_concurrency/src/actors.rs:172:5
    |
164 | pub struct ActorSystem {
    |            ----------- field in this struct
...
172 |     system_supervisor: Option<ActorId>,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `ActorSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: unreachable pattern
   --> seen_typechecker/src/checker.rs:246:13
    |
222 |             Expression::StructLiteral { name, fields, pos } => {
    |             ----------------------------------------------- matches all the relevant values
...
246 |             Expression::StructLiteral { name, fields, pos } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `pos`
   --> seen_typechecker/src/checker.rs:831:87
    |
831 |     fn check_interface_definition(&mut self, name: &str, methods: &[InterfaceMethod], pos: Position) -> Type {
    |                                                                                       ^^^ help: if this is intentional, prefix it with an underscore: `_pos`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `then_branch`
   --> seen_typechecker/src/smart_cast.rs:139:44
    |
139 |         if let Expression::If { condition, then_branch, else_branch, .. } = if_expr {
    |                                            ^^^^^^^^^^^-
    |                                            |
    |                                            help: try removing the field

warning: methods `remove_smart_cast` and `with_smart_casts` are never used
   --> seen_typechecker/src/checker.rs:99:8
    |
25  | impl Environment {
    | ---------------- methods in this implementation
...
99  |     fn remove_smart_cast(&mut self, name: &str) {
    |        ^^^^^^^^^^^^^^^^^
...
104 |     fn with_smart_casts(&self) -> Environment {
    |        ^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: unused imports: `Any` and `TypeId`
  --> seen_effects/src/effects.rs:12:16
   |
12 | use std::any::{Any, TypeId};
   |                ^^^  ^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Expression`
  --> seen_effects/src/effects.rs:14:24
   |
14 | use seen_parser::ast::{Expression, Type};
   |                        ^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_effects/src/contracts.rs:11:17
   |
11 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: unused import: `Type`
  --> seen_effects/src/contracts.rs:14:36
   |
14 | use seen_parser::ast::{Expression, Type, BinaryOperator};
   |                                    ^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_effects/src/metaprogramming.rs:11:17
   |
11 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: unused imports: `Any` and `TypeId`
  --> seen_effects/src/metaprogramming.rs:12:16
   |
12 | use std::any::{Any, TypeId};
   |                ^^^  ^^^^^^

warning: unused import: `Type`
  --> seen_effects/src/metaprogramming.rs:15:36
   |
15 | use seen_parser::ast::{Expression, Type};
   |                                    ^^^^

warning: unused imports: `AsyncError`, `AsyncResult`, and `AsyncValue`
  --> seen_effects/src/metaprogramming.rs:16:20
   |
16 | use crate::types::{AsyncValue, AsyncError, AsyncResult};
   |                    ^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_effects/src/lib.rs:25:17
   |
25 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: fields `next_effect_id` and `next_operation_id` are never read
   --> seen_effects/src/effects.rs:306:5
    |
298 | pub struct EffectSystem {
    |            ------------ fields in this struct
...
306 |     next_effect_id: u64,
    |     ^^^^^^^^^^^^^^
307 |     /// Next available operation ID
308 |     next_operation_id: u64,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `EffectSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
    = note: `#[warn(dead_code)]` on by default

warning: fields `next_contract_id`, `next_precondition_id`, `next_postcondition_id`, and `next_invariant_id` are never read
   --> seen_effects/src/contracts.rs:304:5
    |
294 | pub struct ContractSystem {
    |            -------------- fields in this struct
...
304 |     next_contract_id: u64,
    |     ^^^^^^^^^^^^^^^^
305 |     next_precondition_id: u64,
    |     ^^^^^^^^^^^^^^^^^^^^
306 |     next_postcondition_id: u64,
    |     ^^^^^^^^^^^^^^^^^^^^^
307 |     next_invariant_id: u64,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `ContractSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `next_macro_id` and `next_template_id` are never read
   --> seen_effects/src/metaprogramming.rs:412:5
    |
399 | pub struct MetaprogrammingSystem {
    |            --------------------- fields in this struct
...
412 |     next_macro_id: u64,
    |     ^^^^^^^^^^^^^
413 |     next_template_id: u64,
    |     ^^^^^^^^^^^^^^^^
    |
    = note: `MetaprogrammingSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: unused import: `Label`
 --> seen_ir/src/function.rs:6:56
  |
6 | use crate::instruction::{BasicBlock, ControlFlowGraph, Label};
  |                                                        ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `IRValue`
   --> seen_ir/src/function.rs:266:34
    |
266 |         use crate::{Instruction, IRValue};
    |                                  ^^^^^^^

warning: unused imports: `BasicBlock` and `Parameter`
  --> seen_ir/src/generator.rs:9:32
   |
9  |     instruction::{Instruction, BasicBlock, Label, BinaryOp, UnaryOp},
   |                                ^^^^^^^^^^
10 |     function::{IRFunction, Parameter},
   |                            ^^^^^^^^^

warning: unused imports: `BasicBlock` and `IRType`
 --> seen_ir/src/optimizer.rs:6:32
  |
6 |     instruction::{Instruction, BasicBlock, BinaryOp, UnaryOp},
  |                                ^^^^^^^^^^
7 |     value::{IRValue, IRType},
  |                      ^^^^^^

warning: unused import: `std::collections::HashMap`
 --> seen_ir/src/cfg_builder.rs:4:5
  |
4 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `UnaryOp`
 --> seen_ir/src/simple_codegen.rs:7:54
  |
7 |     instruction::{Instruction, BasicBlock, BinaryOp, UnaryOp},
  |                                                      ^^^^^^^

warning: unused variable: `name`
   --> seen_ir/src/value.rs:197:33
    |
197 |             IRValue::Function { name, parameters } => {
    |                                 ^^^^ help: try ignoring the field: `name: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `ensures`
   --> seen_ir/src/generator.rs:175:70
    |
175 |                 Expression::ContractedFunction { function, requires, ensures, invariants, .. } => {
    |                                                                      ^^^^^^^-
    |                                                                      |
    |                                                                      help: try removing the field

warning: unused variable: `invariants`
   --> seen_ir/src/generator.rs:175:79
    |
175 |                 Expression::ContractedFunction { function, requires, ensures, invariants, .. } => {
    |                                                                               ^^^^^^^^^^-
    |                                                                               |
    |                                                                               help: try removing the field

warning: unused variable: `contract_body`
   --> seen_ir/src/generator.rs:180:33
    |
180 |                         let mut contract_body: Vec<Instruction> = Vec::new();
    |                                 ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_contract_body`

warning: variable does not need to be mutable
   --> seen_ir/src/generator.rs:180:29
    |
180 |                         let mut contract_body: Vec<Instruction> = Vec::new();
    |                             ----^^^^^^^^^^^^^
    |                             |
    |                             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `reference_type`
    --> seen_ir/src/generator.rs:1104:13
     |
1104 |         let reference_type = IRType::Pointer(Box::new(source_type));
     |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_reference_type`

warning: unused variable: `receiver_type`
    --> seen_ir/src/generator.rs:1320:13
     |
1320 |         let receiver_type = if !params.is_empty() {
     |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_receiver_type`

warning: unused variable: `body_value`
    --> seen_ir/src/generator.rs:1354:14
     |
1354 |         let (body_value, body_instructions) = self.generate_expression(body)?;
     |              ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_body_value`

warning: unused variable: `extract_label`
    --> seen_ir/src/generator.rs:1522:29
     |
1522 |                         let extract_label = self.context.create_label("extract_fields");
     |                             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_extract_label`

warning: unused variable: `finish_current_block`
  --> seen_ir/src/cfg_builder.rs:18:9
   |
18 |     let finish_current_block = |current_block: Option<BasicBlock>, cfg: &mut ControlFlowGraph| {
   |         ^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_finish_current_block`

warning: unreachable pattern
   --> seen_ir/src/simple_codegen.rs:369:21
    |
369 |                     _ => return Err(CodeGenError::UnsupportedInstruction(format!("Binary op: {:?}", op))),
    |                     ^ no value can reach this
    |
note: multiple earlier patterns match some of the same values
   --> seen_ir/src/simple_codegen.rs:369:21
    |
351 |                     BinaryOp::Add => "+",
    |                     ------------- matches some of the same values
352 |                     BinaryOp::Subtract => "-",
    |                     ------------------ matches some of the same values
353 |                     BinaryOp::Multiply => "*",
    |                     ------------------ matches some of the same values
354 |                     BinaryOp::Divide => "/",
    |                     ---------------- matches some of the same values
...
369 |                     _ => return Err(CodeGenError::UnsupportedInstruction(format!("Binary op: {:?}", op))),
    |                     ^ ...and 14 other patterns collectively make this unreachable
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `left`
   --> seen_ir/src/simple_codegen.rs:762:78
    |
762 |                 Instruction::Binary { op: crate::instruction::BinaryOp::Add, left, right: IRValue::Integer(1), .. }
    |                                                                              ^^^^ help: try ignoring the field: `left: _`

warning: unused variable: `terminator`
   --> seen_ir/src/simple_codegen.rs:722:73
    |
722 |     fn generate_for_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
    |                                                                         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_terminator`

warning: unused variable: `terminator`
   --> seen_ir/src/simple_codegen.rs:833:75
    |
833 |     fn generate_while_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
    |                                                                           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_terminator`

warning: methods `optimize_loop_invariants` and `optimize_loop_unrolling` are never used
   --> seen_ir/src/optimizer.rs:434:8
    |
58  | impl IROptimizer {
    | ---------------- methods in this implementation
...
434 |     fn optimize_loop_invariants(&mut self, _function: &mut IRFunction) -> IRResult<()> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
...
448 |     fn optimize_loop_unrolling(&mut self, _function: &mut IRFunction) -> IRResult<()> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: methods `generate_for_loop_block`, `generate_while_loop_block`, `generate_if_else_block`, `count_if_else_instructions`, `find_result_assignment`, and `find_result_variable` are never used
    --> seen_ir/src/simple_codegen.rs:722:8
     |
78   | impl CCodeGenerator {
     | ------------------- methods in this implementation
...
722  |     fn generate_for_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
     |        ^^^^^^^^^^^^^^^^^^^^^^^
...
833  |     fn generate_while_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^
...
925  |     fn generate_if_else_block(&self, instructions: &[Instruction]) -> Result<Option<String>> {
     |        ^^^^^^^^^^^^^^^^^^^^^^
...
1019 |     fn count_if_else_instructions(&self, instructions: &[Instruction]) -> usize {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1041 |     fn find_result_assignment(&self, instructions: &[Instruction]) -> Option<IRValue> {
     |        ^^^^^^^^^^^^^^^^^^^^^^
...
1051 |     fn find_result_variable(&self, instructions: &[Instruction]) -> Result<String> {
     |        ^^^^^^^^^^^^^^^^^^^^

warning: `seen_concurrency` (lib) generated 33 warnings (run `cargo fix --lib -p seen_concurrency` to apply 7 suggestions)
warning: `seen_typechecker` (lib) generated 4 warnings (run `cargo fix --lib -p seen_typechecker` to apply 1 suggestion)
warning: `seen_effects` (lib) generated 12 warnings (run `cargo fix --lib -p seen_effects` to apply 9 suggestions)
warning: `seen_ir` (lib) generated 22 warnings (run `cargo fix --lib -p seen_ir` to apply 9 suggestions)
warning: unused import: `Duration`
  --> seen_reactive/src/observable.rs:10:17
   |
10 | use std::time::{Duration, Instant};
   |                 ^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `futures::stream::Stream`
  --> seen_reactive/src/observable.rs:11:5
   |
11 | use futures::stream::Stream;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Weak`
  --> seen_reactive/src/properties.rs:10:29
   |
10 | use std::sync::{Arc, Mutex, Weak};
   |                             ^^^^

warning: unused import: `std::any::Any`
  --> seen_reactive/src/properties.rs:12:5
   |
12 | use std::any::Any;
   |     ^^^^^^^^^^^^^

warning: unused imports: `ObservableId` and `Observable`
  --> seen_reactive/src/properties.rs:16:25
   |
16 | use crate::observable::{Observable, ObservableId};
   |                         ^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> seen_reactive/src/flow.rs:10:5
   |
10 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Context` and `Poll`
  --> seen_reactive/src/flow.rs:11:17
   |
11 | use std::task::{Context, Poll};
   |                 ^^^^^^^  ^^^^

warning: unused import: `futures::Stream`
  --> seen_reactive/src/flow.rs:12:5
   |
12 | use futures::Stream;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `seen_concurrency::types::*`
  --> seen_reactive/src/flow.rs:13:5
   |
13 | use seen_concurrency::types::*;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_reactive/src/lib.rs:20:17
   |
20 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: unused import: `AsyncResult`
  --> seen_reactive/src/lib.rs:22:55
   |
22 | use seen_concurrency::types::{AsyncValue, AsyncError, AsyncResult};
   |                                                       ^^^^^^^^^^^

warning: unused import: `std::time::Duration`
   --> seen_reactive/src/lib.rs:223:9
    |
223 |     use std::time::Duration;
    |         ^^^^^^^^^^^^^^^^^^^

warning: unused variable: `interval`
   --> seen_reactive/src/flow.rs:186:18
    |
186 |     pub fn timer(interval: Duration, max_count: Option<usize>) -> Flow<u64> {
    |                  ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_interval`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: fields `flows` and `config` are never read
  --> seen_reactive/src/lib.rs:32:5
   |
26 | pub struct ReactiveRuntime {
   |            --------------- fields in this struct
...
32 |     flows: HashMap<flow::FlowId, Box<dyn std::any::Any + Send>>,
   |     ^^^^^
33 |     /// Runtime configuration
34 |     config: ReactiveRuntimeConfig,
   |     ^^^^^^
   |
   = note: `ReactiveRuntime` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `next_id` is never read
   --> seen_reactive/src/observable.rs:246:5
    |
244 | pub struct ObservableFactory {
    |            ----------------- field in this struct
245 |     /// Next observable ID
246 |     next_id: u64,
    |     ^^^^^^^
    |
    = note: `ObservableFactory` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `property_type` is never read
  --> seen_reactive/src/properties.rs:71:5
   |
57 | pub struct ComputedProperty {
   |            ---------------- field in this struct
...
71 |     property_type: Type,
   |     ^^^^^^^^^^^^^
   |
   = note: `ComputedProperty` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `next_property_id` and `next_observer_id` are never read
   --> seen_reactive/src/properties.rs:197:5
    |
189 | pub struct ReactivePropertyManager {
    |            ----------------------- fields in this struct
...
197 |     next_property_id: u64,
    |     ^^^^^^^^^^^^^^^^
198 |     /// Next available observer ID
199 |     next_observer_id: u64,
    |     ^^^^^^^^^^^^^^^^
    |
    = note: `ReactivePropertyManager` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `next_id` is never read
   --> seen_reactive/src/flow.rs:151:5
    |
149 | pub struct FlowFactory {
    |            ----------- field in this struct
150 |     /// Next flow ID
151 |     next_id: FlowId,
    |     ^^^^^^^
    |
    = note: `FlowFactory` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: unused import: `std::collections::HashMap`
 --> seen_memory_manager/src/memory_manager.rs:7:5
  |
7 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `OwnershipError`
  --> seen_memory_manager/src/regions.rs:10:39
   |
10 | use crate::ownership::{OwnershipInfo, OwnershipError};
   |                                       ^^^^^^^^^^^^^^

warning: unused variable: `result`
   --> seen_memory_manager/src/memory_manager.rs:382:33
    |
382 |     fn check_double_free(&self, result: &mut MemoryAnalysisResult) {
    |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `var_name`
   --> seen_memory_manager/src/memory_manager.rs:391:14
    |
391 |         for (var_name, var_info) in &result.ownership_info.variables {
    |              ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_var_name`

warning: unused variable: `pos`
   --> seen_memory_manager/src/regions.rs:413:44
    |
413 |             Expression::Let { name, value, pos, .. } => {
    |                                            ^^^-
    |                                            |
    |                                            help: try removing the field

warning: field `ownership_info` is never read
   --> seen_memory_manager/src/regions.rs:374:5
    |
370 | pub struct RegionAnalyzer {
    |            -------------- field in this struct
...
374 |     ownership_info: Option<OwnershipInfo>,
    |     ^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: `seen_reactive` (lib) generated 18 warnings (run `cargo fix --lib -p seen_reactive` to apply 12 suggestions)
warning: `seen_memory_manager` (lib) generated 6 warnings (run `cargo fix --lib -p seen_memory_manager` to apply 3 suggestions)
warning: unused imports: `Deserialize` and `Serialize`
 --> seen_interpreter/src/value.rs:5:13
  |
5 | use serde::{Serialize, Deserialize};
  |             ^^^^^^^^^  ^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Flow`, `Observable`, and `ReactiveProperty`
 --> seen_interpreter/src/value.rs:8:21
  |
8 | use seen_reactive::{Observable, Flow, ReactiveProperty};
  |                     ^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^^^^

warning: unused imports: `ActorRef`, `Promise`, and `TaskId`
 --> seen_interpreter/src/interpreter.rs:7:13
  |
7 |     types::{Promise, TaskPriority, AsyncValue, TaskId, ActorRef, AsyncError, AsyncResult},
  |             ^^^^^^^                            ^^^^^^  ^^^^^^^^

warning: unused imports: `Flow`, `Observable`, `ReactiveProperty`, and `properties::PropertyId`
  --> seen_interpreter/src/interpreter.rs:18:5
   |
18 |     Observable, Flow, ReactiveProperty,
   |     ^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^^^^
19 |     properties::PropertyId,
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:474:13
    |
130 |             Expression::FloatLiteral { value, .. } => Ok(Value::Float(*value)),
    |             -------------------------------------- matches all the relevant values
...
474 |             Expression::FloatLiteral { value, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:478:13
    |
385 |             Expression::InterpolatedString { parts, .. } => {
    |             -------------------------------------------- matches all the relevant values
...
478 |             Expression::InterpolatedString { parts, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:492:13
    |
153 |             Expression::UnaryOp { op, operand, pos } => {
    |             ---------------------------------------- matches all the relevant values
...
492 |             Expression::UnaryOp { op, operand, pos } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:504:13
    |
389 |             Expression::Elvis { nullable, default, .. } => {
    |             ------------------------------------------- matches all the relevant values
...
504 |             Expression::Elvis { nullable, default, pos } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:513:13
    |
305 |             Expression::IndexAccess { object, index, pos } => {
    |             ---------------------------------------------- matches all the relevant values
...
513 |             Expression::IndexAccess { object, index, pos, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:535:13
    |
286 |             Expression::Lambda { params, body, .. } => {
    |             --------------------------------------- matches all the relevant values
...
535 |             Expression::Lambda { params, body, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: value assigned to `last_value` is never read
   --> seen_interpreter/src/interpreter.rs:201:25
    |
201 |                 let mut last_value = Value::Unit;
    |                         ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `pos`
   --> seen_interpreter/src/interpreter.rs:433:56
    |
433 |             Expression::Receive { pattern: _, handler, pos } => {
    |                                                        ^^^ help: try ignoring the field: `pos: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `pos`
   --> seen_interpreter/src/interpreter.rs:504:52
    |
504 |             Expression::Elvis { nullable, default, pos } => {
    |                                                    ^^^ help: try ignoring the field: `pos: _`

warning: unused variable: `pos`
   --> seen_interpreter/src/interpreter.rs:546:61
    |
546 |             Expression::Try { body, catch_clauses, finally, pos, .. } => {
    |                                                             ^^^-
    |                                                             |
    |                                                             help: try removing the field

warning: unused variable: `promise`
   --> seen_interpreter/src/interpreter.rs:904:28
    |
904 |             Value::Promise(promise) => {
    |                            ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_promise`

warning: unused variable: `task_id`
   --> seen_interpreter/src/interpreter.rs:919:25
    |
919 |             Value::Task(task_id) => {
    |                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_task_id`

warning: unused variable: `actor_system`
    --> seen_interpreter/src/interpreter.rs:1076:13
     |
1076 |         let actor_system = self.runtime.actor_system();
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_actor_system`

warning: unused variable: `pos`
    --> seen_interpreter/src/interpreter.rs:1071:104
     |
1071 | ...ring, seen_parser::ast::Type)], pos: Position) -> InterpreterResult<Value> {
     |                                    ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `advanced_runtime`
    --> seen_interpreter/src/interpreter.rs:1201:13
     |
1201 |         let advanced_runtime = self.runtime.advanced_runtime();
     |             ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_advanced_runtime`

warning: unused variable: `effect_handle`
    --> seen_interpreter/src/interpreter.rs:1227:13
     |
1227 |         let effect_handle = Value::EffectHandle {
     |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_effect_handle`

warning: unused variable: `effect`
    --> seen_interpreter/src/interpreter.rs:1208:55
     |
1208 |     fn interpret_handle(&mut self, body: &Expression, effect: &str, handlers: &[seen_parser::ast::EffectHandler], pos: Position) -> Inter...
     |                                                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_effect`

warning: unused variable: `pos`
    --> seen_interpreter/src/interpreter.rs:1208:115
     |
1208 | ...en_parser::ast::EffectHandler], pos: Position) -> InterpreterResult<Value> {
     |                                    ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `pos`
    --> seen_interpreter/src/interpreter.rs:1328:62
     |
1328 |     fn interpret_flow_creation(&mut self, body: &Expression, pos: Position) -> InterpreterResult<Value> {
     |                                                              ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `obs`
    --> seen_interpreter/src/interpreter.rs:1395:31
     |
1395 |             Value::Observable(obs) => {
     |                               ^^^ help: if this is intentional, prefix it with an underscore: `_obs`

warning: field `is_function_scope` is never read
  --> seen_interpreter/src/runtime.rs:41:5
   |
38 | pub struct Environment {
   |            ----------- field in this struct
...
41 |     is_function_scope: bool,
   |     ^^^^^^^^^^^^^^^^^
   |
   = note: `Environment` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `task_counter` is never read
  --> seen_interpreter/src/interpreter.rs:84:5
   |
72 | pub struct Interpreter {
   |            ----------- field in this struct
...
84 |     task_counter: std::sync::atomic::AtomicU64,
   |     ^^^^^^^^^^^^

warning: `seen_interpreter` (lib) generated 26 warnings (run `cargo fix --lib -p seen_interpreter` to apply 5 suggestions)
warning: unused variable: `uri`
  --> seen_lsp/src/lib.rs:75:38
   |
75 |     async fn analyze_document(&self, uri: &Url, content: &str) -> Vec<Diagnostic> {
   |                                      ^^^ help: if this is intentional, prefix it with an underscore: `_uri`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `language`
  --> seen_lsp/src/lib.rs:79:13
   |
79 |         let language = self.language_config.read().await.clone();
   |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_language`

warning: variable does not need to be mutable
  --> seen_lsp/src/lib.rs:83:13
   |
83 |         let mut lexer = Lexer::new(content.to_string(), keyword_manager);
   |             ----^^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: use of deprecated field `tower_lsp::lsp_types::SymbolInformation::deprecated`: Use tags instead
   --> seen_lsp/src/lib.rs:997:21
    |
997 |                     deprecated: None,
    |                     ^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: variable does not need to be mutable
   --> seen_lsp/src/lib.rs:707:13
    |
707 |         let mut lexer = Lexer::new(content.clone(), keyword_manager);
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> seen_lsp/src/lib.rs:750:17
    |
750 |             let mut lexer = Lexer::new(content.clone(), keyword_manager);
    |                 ----^^^^^
    |                 |
    |                 help: remove this `mut`

warning: field `references` is never read
  --> seen_lsp/src/lib.rs:31:5
   |
23 | struct SymbolInfo {
   |        ---------- field in this struct
...
31 |     references: Vec<Location>,
   |     ^^^^^^^^^^
   |
   = note: `SymbolInfo` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `type_info` is never read
  --> seen_lsp/src/lib.rs:44:5
   |
36 | struct DocumentInfo {
   |        ------------ field in this struct
...
44 |     type_info: Option<TypeCheckResult>,
   |     ^^^^^^^^^
   |
   = note: `DocumentInfo` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `global_symbols` is never read
  --> seen_lsp/src/lib.rs:60:5
   |
52 | pub struct SeenLanguageServer {
   |            ------------------ field in this struct
...
60 |     global_symbols: Arc<RwLock<HashMap<String, Vec<SymbolInfo>>>>,
   |     ^^^^^^^^^^^^^^

warning: `seen_lsp` (lib) generated 9 warnings (run `cargo fix --lib -p seen_lsp` to apply 3 suggestions)
warning: unused variable: `program`
   --> seen_cli/src/main.rs:962:75
    |
962 | fn run_single_test(interpreter: &mut Interpreter, test_func: &Expression, program: &Program) -> Result<()> {
    |                                                                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_program`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: `seen_cli` (bin "seen_cli") generated 1 warning
    Finished `release` profile [optimized] target(s) in 2.59s
     Running `target/release/seen_cli build compiler_seen/src/main_compiler.seen -o stage1_compiler.c`
Compiling compiler_seen/src/main_compiler.seen with optimization level 0
Error: Failed to parse source

Caused by:
    Unexpected token: found EOF, expected end of expression
[0;31m❌ STAGE 1 FAILED: No C code generated[0m
Fri Aug 15 23:29:21 +03 2025: Starting bootstrap verification
Working directory: /mnt/d/Projects/Rust/seenlang
[0;32m✅ Seen compiler source found[0m
[0;32m✅ Rust bootstrap compiler ready[0m
[0;32m✅ clang compiler available[0m
🧹 Cleaning up previous bootstrap attempts...
[0;34mUsing Rust bootstrap compiler to compile Seen compiler[0m
Command: cargo run -p seen_cli --release -- build compiler_seen/src/main_compiler.seen -o stage1_compiler.c
warning: /mnt/d/Projects/Rust/seenlang/Cargo.toml: `panic` setting is ignored for `bench` profile
warning: /mnt/d/Projects/Rust/seenlang/Cargo.toml: `panic` setting is ignored for `test` profile
warning: unused variable: `pos`
   --> seen_parser/src/parser.rs:435:75
    |
435 |                     else if let Expression::Identifier { name, is_public, pos } = &expr {
    |                                                                           ^^^ help: try ignoring the field: `pos: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `pos`
    --> seen_parser/src/parser.rs:3562:13
     |
3562 |         let pos = self.current.position.clone();
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `pos`
    --> seen_parser/src/parser.rs:3586:13
     |
3586 |         let pos = self.current.position.clone();
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `pos`
    --> seen_parser/src/parser.rs:3708:13
     |
3708 |         let pos = self.current.position.clone();
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: variable does not need to be mutable
    --> seen_parser/src/parser.rs:3891:13
     |
3891 |         let mut iter = arms.into_iter().rev();
     |             ----^^^^
     |             |
     |             help: remove this `mut`
     |
     = note: `#[warn(unused_mut)]` on by default

warning: variants `Statement` and `Expression` are never constructed
  --> seen_parser/src/parser.rs:15:5
   |
13 | enum ParsingContext {
   |      -------------- variants in this enum
14 |     TopLevel,
15 |     Statement,
   |     ^^^^^^^^^
16 |     Expression,
   |     ^^^^^^^^^^
   |
   = note: `ParsingContext` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `parsing_context` is never read
  --> seen_parser/src/parser.rs:23:5
   |
19 | pub struct Parser {
   |            ------ field in this struct
...
23 |     parsing_context: ParsingContext,
   |     ^^^^^^^^^^^^^^^

warning: methods `try_parse_literal`, `is_type_at_lookahead`, `parse_class`, `parse_when`, and `convert_when_to_if_chain` are never used
    --> seen_parser/src/parser.rs:2284:8
     |
26   | impl Parser {
     | ----------- methods in this implementation
...
2284 |     fn try_parse_literal(&mut self) -> ParseResult<Expression> {
     |        ^^^^^^^^^^^^^^^^^
...
2687 |     fn is_type_at_lookahead(&mut self, _distance: usize) -> bool {
     |        ^^^^^^^^^^^^^^^^^^^^
...
3450 |     fn parse_class(&mut self) -> ParseResult<Expression> {
     |        ^^^^^^^^^^^
...
3609 |     fn parse_when(&mut self) -> ParseResult<Expression> {
     |        ^^^^^^^^^^
...
3883 |     fn convert_when_to_if_chain(&self, arms: Vec<MatchArm>, pos: Position) -> ParseResult<Expression> {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^

warning: `seen_parser` (lib) generated 8 warnings (run `cargo fix --lib -p seen_parser` to apply 1 suggestion)
warning: unused import: `seen_parser::ast::Expression`
  --> seen_concurrency/src/async_runtime.rs:13:5
   |
13 | use seen_parser::ast::Expression;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `AsyncResult`
  --> seen_concurrency/src/channels.rs:14:44
   |
14 | use crate::types::{AsyncValue, AsyncError, AsyncResult, ChannelId, TaskId};
   |                                            ^^^^^^^^^^^

warning: unused import: `Condvar`
  --> seen_concurrency/src/actors.rs:11:29
   |
11 | use std::sync::{Arc, Mutex, Condvar};
   |                             ^^^^^^^

warning: unused import: `Duration`
  --> seen_concurrency/src/actors.rs:12:17
   |
12 | use std::time::{Duration, Instant, SystemTime};
   |                 ^^^^^^^^

warning: unused import: `TaskId`
  --> seen_concurrency/src/actors.rs:17:5
   |
17 |     TaskId, TaskPriority, Mailbox
   |     ^^^^^^

warning: unused import: `AsyncResult`
  --> seen_concurrency/src/select.rs:14:40
   |
14 |     ChannelId, AsyncValue, AsyncError, AsyncResult, TaskId
   |                                        ^^^^^^^^^^^

warning: unused variable: `runtime`
  --> seen_concurrency/src/async_functions.rs:92:9
   |
92 |         runtime: &mut AsyncRuntime,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_runtime`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `name`
   --> seen_concurrency/src/async_functions.rs:239:41
    |
239 |             Expression::StructLiteral { name, fields, .. } => {
    |                                         ^^^^-
    |                                         |
    |                                         help: try removing the field

warning: unused variable: `expr`
   --> seen_concurrency/src/async_functions.rs:340:9
    |
340 |         expr: &Expression,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_expr`

warning: unused variable: `task_id`
   --> seen_concurrency/src/async_runtime.rs:290:28
    |
290 |     fn create_waker(&self, task_id: TaskId) -> Waker {
    |                            ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_task_id`

warning: unused variable: `pattern`
   --> seen_concurrency/src/channels.rs:485:51
    |
485 |                 SelectCase::Receive { channel_id, pattern } => {
    |                                                   ^^^^^^^ help: try ignoring the field: `pattern: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/channels.rs:486:33
    |
486 |                     if let Some(channel) = self.channels.get(channel_id) {
    |                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `value`
   --> seen_concurrency/src/channels.rs:492:48
    |
492 |                 SelectCase::Send { channel_id, value } => {
    |                                                ^^^^^ help: try ignoring the field: `value: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/channels.rs:493:33
    |
493 |                     if let Some(channel) = self.channels.get(channel_id) {
    |                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `channel_type`
   --> seen_concurrency/src/channels.rs:560:5
    |
560 |     channel_type: &Type,
    |     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel_type`

warning: unused variable: `handler_result`
   --> seen_concurrency/src/actors.rs:368:13
    |
368 |         let handler_result: AsyncResult = match &handler.handler {
    |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler_result`

warning: unused variable: `payload`
   --> seen_concurrency/src/actors.rs:532:70
    |
532 |     pub fn send_message(&mut self, target: ActorId, message: String, payload: AsyncValue) -> Result<(), AsyncError> {
    |                                                                      ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_payload`

warning: unused variable: `payload`
   --> seen_concurrency/src/actors.rs:548:9
    |
548 |         payload: AsyncValue,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_payload`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:115:9
    |
115 |         handler: Expression,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: unused variable: `position`
   --> seen_concurrency/src/select.rs:116:9
    |
116 |         position: Position,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_position`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:130:9
    |
130 |         handler: Expression,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: unused variable: `position`
   --> seen_concurrency/src/select.rs:131:9
    |
131 |         position: Position,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_position`

warning: unused variable: `pattern`
   --> seen_concurrency/src/select.rs:300:47
    |
300 |             SelectCase::Receive { channel_id, pattern } => {
    |                                               ^^^^^^^ help: try ignoring the field: `pattern: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/select.rs:302:29
    |
302 |                 if let Some(channel) = self.channel_manager.get_channel(*channel_id) {
    |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `value`
   --> seen_concurrency/src/select.rs:310:44
    |
310 |             SelectCase::Send { channel_id, value } => {
    |                                            ^^^^^ help: try ignoring the field: `value: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/select.rs:312:29
    |
312 |                 if let Some(channel) = self.channel_manager.get_channel(*channel_id) {
    |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `duration`
   --> seen_concurrency/src/select.rs:320:35
    |
320 |             SelectCase::Timeout { duration } => {
    |                                   ^^^^^^^^ help: try ignoring the field: `duration: _`

warning: unused variable: `receiver`
   --> seen_concurrency/src/select.rs:408:22
    |
408 |         let (sender, receiver) = self.channel_manager.create_channel::<T>(capacity);
    |                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_receiver`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:445:13
    |
445 |             handler: Expression,
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:459:13
    |
459 |             handler: Expression,
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: fields `sender_count` and `receiver_count` are never read
  --> seen_concurrency/src/channels.rs:30:5
   |
18 | pub struct Channel<T> {
   |            ------- fields in this struct
...
30 |     sender_count: Arc<Mutex<usize>>,
   |     ^^^^^^^^^^^^
31 |     /// Number of active receivers
32 |     receiver_count: Arc<Mutex<usize>>,
   |     ^^^^^^^^^^^^^^
   |
   = note: `Channel` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `next_channel_id` is never read
   --> seen_concurrency/src/channels.rs:101:5
    |
97  | pub struct ChannelManager {
    |            -------------- field in this struct
...
101 |     next_channel_id: u64,
    |     ^^^^^^^^^^^^^^^
    |
    = note: `ChannelManager` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `system_supervisor` is never read
   --> seen_concurrency/src/actors.rs:172:5
    |
164 | pub struct ActorSystem {
    |            ----------- field in this struct
...
172 |     system_supervisor: Option<ActorId>,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `ActorSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: unreachable pattern
   --> seen_typechecker/src/checker.rs:246:13
    |
222 |             Expression::StructLiteral { name, fields, pos } => {
    |             ----------------------------------------------- matches all the relevant values
...
246 |             Expression::StructLiteral { name, fields, pos } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `pos`
   --> seen_typechecker/src/checker.rs:831:87
    |
831 |     fn check_interface_definition(&mut self, name: &str, methods: &[InterfaceMethod], pos: Position) -> Type {
    |                                                                                       ^^^ help: if this is intentional, prefix it with an underscore: `_pos`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `then_branch`
   --> seen_typechecker/src/smart_cast.rs:139:44
    |
139 |         if let Expression::If { condition, then_branch, else_branch, .. } = if_expr {
    |                                            ^^^^^^^^^^^-
    |                                            |
    |                                            help: try removing the field

warning: methods `remove_smart_cast` and `with_smart_casts` are never used
   --> seen_typechecker/src/checker.rs:99:8
    |
25  | impl Environment {
    | ---------------- methods in this implementation
...
99  |     fn remove_smart_cast(&mut self, name: &str) {
    |        ^^^^^^^^^^^^^^^^^
...
104 |     fn with_smart_casts(&self) -> Environment {
    |        ^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: unused imports: `Any` and `TypeId`
  --> seen_effects/src/effects.rs:12:16
   |
12 | use std::any::{Any, TypeId};
   |                ^^^  ^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Expression`
  --> seen_effects/src/effects.rs:14:24
   |
14 | use seen_parser::ast::{Expression, Type};
   |                        ^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_effects/src/contracts.rs:11:17
   |
11 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: unused import: `Type`
  --> seen_effects/src/contracts.rs:14:36
   |
14 | use seen_parser::ast::{Expression, Type, BinaryOperator};
   |                                    ^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_effects/src/metaprogramming.rs:11:17
   |
11 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: unused imports: `Any` and `TypeId`
  --> seen_effects/src/metaprogramming.rs:12:16
   |
12 | use std::any::{Any, TypeId};
   |                ^^^  ^^^^^^

warning: unused import: `Type`
  --> seen_effects/src/metaprogramming.rs:15:36
   |
15 | use seen_parser::ast::{Expression, Type};
   |                                    ^^^^

warning: unused imports: `AsyncError`, `AsyncResult`, and `AsyncValue`
  --> seen_effects/src/metaprogramming.rs:16:20
   |
16 | use crate::types::{AsyncValue, AsyncError, AsyncResult};
   |                    ^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_effects/src/lib.rs:25:17
   |
25 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: fields `next_effect_id` and `next_operation_id` are never read
   --> seen_effects/src/effects.rs:306:5
    |
298 | pub struct EffectSystem {
    |            ------------ fields in this struct
...
306 |     next_effect_id: u64,
    |     ^^^^^^^^^^^^^^
307 |     /// Next available operation ID
308 |     next_operation_id: u64,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `EffectSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
    = note: `#[warn(dead_code)]` on by default

warning: fields `next_contract_id`, `next_precondition_id`, `next_postcondition_id`, and `next_invariant_id` are never read
   --> seen_effects/src/contracts.rs:304:5
    |
294 | pub struct ContractSystem {
    |            -------------- fields in this struct
...
304 |     next_contract_id: u64,
    |     ^^^^^^^^^^^^^^^^
305 |     next_precondition_id: u64,
    |     ^^^^^^^^^^^^^^^^^^^^
306 |     next_postcondition_id: u64,
    |     ^^^^^^^^^^^^^^^^^^^^^
307 |     next_invariant_id: u64,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `ContractSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `next_macro_id` and `next_template_id` are never read
   --> seen_effects/src/metaprogramming.rs:412:5
    |
399 | pub struct MetaprogrammingSystem {
    |            --------------------- fields in this struct
...
412 |     next_macro_id: u64,
    |     ^^^^^^^^^^^^^
413 |     next_template_id: u64,
    |     ^^^^^^^^^^^^^^^^
    |
    = note: `MetaprogrammingSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: unused import: `Label`
 --> seen_ir/src/function.rs:6:56
  |
6 | use crate::instruction::{BasicBlock, ControlFlowGraph, Label};
  |                                                        ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `IRValue`
   --> seen_ir/src/function.rs:266:34
    |
266 |         use crate::{Instruction, IRValue};
    |                                  ^^^^^^^

warning: unused imports: `BasicBlock` and `Parameter`
  --> seen_ir/src/generator.rs:9:32
   |
9  |     instruction::{Instruction, BasicBlock, Label, BinaryOp, UnaryOp},
   |                                ^^^^^^^^^^
10 |     function::{IRFunction, Parameter},
   |                            ^^^^^^^^^

warning: unused imports: `BasicBlock` and `IRType`
 --> seen_ir/src/optimizer.rs:6:32
  |
6 |     instruction::{Instruction, BasicBlock, BinaryOp, UnaryOp},
  |                                ^^^^^^^^^^
7 |     value::{IRValue, IRType},
  |                      ^^^^^^

warning: unused import: `std::collections::HashMap`
 --> seen_ir/src/cfg_builder.rs:4:5
  |
4 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `UnaryOp`
 --> seen_ir/src/simple_codegen.rs:7:54
  |
7 |     instruction::{Instruction, BasicBlock, BinaryOp, UnaryOp},
  |                                                      ^^^^^^^

warning: unused variable: `name`
   --> seen_ir/src/value.rs:197:33
    |
197 |             IRValue::Function { name, parameters } => {
    |                                 ^^^^ help: try ignoring the field: `name: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `ensures`
   --> seen_ir/src/generator.rs:175:70
    |
175 |                 Expression::ContractedFunction { function, requires, ensures, invariants, .. } => {
    |                                                                      ^^^^^^^-
    |                                                                      |
    |                                                                      help: try removing the field

warning: unused variable: `invariants`
   --> seen_ir/src/generator.rs:175:79
    |
175 |                 Expression::ContractedFunction { function, requires, ensures, invariants, .. } => {
    |                                                                               ^^^^^^^^^^-
    |                                                                               |
    |                                                                               help: try removing the field

warning: unused variable: `contract_body`
   --> seen_ir/src/generator.rs:180:33
    |
180 |                         let mut contract_body: Vec<Instruction> = Vec::new();
    |                                 ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_contract_body`

warning: variable does not need to be mutable
   --> seen_ir/src/generator.rs:180:29
    |
180 |                         let mut contract_body: Vec<Instruction> = Vec::new();
    |                             ----^^^^^^^^^^^^^
    |                             |
    |                             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `reference_type`
    --> seen_ir/src/generator.rs:1104:13
     |
1104 |         let reference_type = IRType::Pointer(Box::new(source_type));
     |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_reference_type`

warning: unused variable: `receiver_type`
    --> seen_ir/src/generator.rs:1320:13
     |
1320 |         let receiver_type = if !params.is_empty() {
     |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_receiver_type`

warning: unused variable: `body_value`
    --> seen_ir/src/generator.rs:1354:14
     |
1354 |         let (body_value, body_instructions) = self.generate_expression(body)?;
     |              ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_body_value`

warning: unused variable: `extract_label`
    --> seen_ir/src/generator.rs:1522:29
     |
1522 |                         let extract_label = self.context.create_label("extract_fields");
     |                             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_extract_label`

warning: unused variable: `finish_current_block`
  --> seen_ir/src/cfg_builder.rs:18:9
   |
18 |     let finish_current_block = |current_block: Option<BasicBlock>, cfg: &mut ControlFlowGraph| {
   |         ^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_finish_current_block`

warning: unreachable pattern
   --> seen_ir/src/simple_codegen.rs:239:21
    |
223 |                     Instruction::Store { value, dest } => {
    |                     ---------------------------------- matches all the relevant values
...
239 |                     Instruction::Store { value: IRValue::Register(src_reg), dest: IRValue::Variable(name) } => {
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `left`
   --> seen_ir/src/simple_codegen.rs:211:49
    |
211 |                     Instruction::StringConcat { left, right, result } => {
    |                                                 ^^^^ help: try ignoring the field: `left: _`

warning: unused variable: `right`
   --> seen_ir/src/simple_codegen.rs:211:55
    |
211 |                     Instruction::StringConcat { left, right, result } => {
    |                                                       ^^^^^ help: try ignoring the field: `right: _`

warning: unreachable pattern
   --> seen_ir/src/simple_codegen.rs:436:21
    |
436 |                     _ => return Err(CodeGenError::UnsupportedInstruction(format!("Binary op: {:?}", op))),
    |                     ^ no value can reach this
    |
note: multiple earlier patterns match some of the same values
   --> seen_ir/src/simple_codegen.rs:436:21
    |
418 |                     BinaryOp::Add => "+",
    |                     ------------- matches some of the same values
419 |                     BinaryOp::Subtract => "-",
    |                     ------------------ matches some of the same values
420 |                     BinaryOp::Multiply => "*",
    |                     ------------------ matches some of the same values
421 |                     BinaryOp::Divide => "/",
    |                     ---------------- matches some of the same values
...
436 |                     _ => return Err(CodeGenError::UnsupportedInstruction(format!("Binary op: {:?}", op))),
    |                     ^ ...and 14 other patterns collectively make this unreachable

warning: unused variable: `left`
   --> seen_ir/src/simple_codegen.rs:853:78
    |
853 |                 Instruction::Binary { op: crate::instruction::BinaryOp::Add, left, right: IRValue::Integer(1), .. }
    |                                                                              ^^^^ help: try ignoring the field: `left: _`

warning: unused variable: `terminator`
   --> seen_ir/src/simple_codegen.rs:813:73
    |
813 |     fn generate_for_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
    |                                                                         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_terminator`

warning: unused variable: `terminator`
   --> seen_ir/src/simple_codegen.rs:924:75
    |
924 |     fn generate_while_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
    |                                                                           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_terminator`

warning: methods `optimize_loop_invariants` and `optimize_loop_unrolling` are never used
   --> seen_ir/src/optimizer.rs:434:8
    |
58  | impl IROptimizer {
    | ---------------- methods in this implementation
...
434 |     fn optimize_loop_invariants(&mut self, _function: &mut IRFunction) -> IRResult<()> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
...
448 |     fn optimize_loop_unrolling(&mut self, _function: &mut IRFunction) -> IRResult<()> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: methods `generate_for_loop_block`, `generate_while_loop_block`, `generate_if_else_block`, `count_if_else_instructions`, `find_result_assignment`, and `find_result_variable` are never used
    --> seen_ir/src/simple_codegen.rs:813:8
     |
78   | impl CCodeGenerator {
     | ------------------- methods in this implementation
...
813  |     fn generate_for_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
     |        ^^^^^^^^^^^^^^^^^^^^^^^
...
924  |     fn generate_while_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^
...
1016 |     fn generate_if_else_block(&self, instructions: &[Instruction]) -> Result<Option<String>> {
     |        ^^^^^^^^^^^^^^^^^^^^^^
...
1110 |     fn count_if_else_instructions(&self, instructions: &[Instruction]) -> usize {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1132 |     fn find_result_assignment(&self, instructions: &[Instruction]) -> Option<IRValue> {
     |        ^^^^^^^^^^^^^^^^^^^^^^
...
1142 |     fn find_result_variable(&self, instructions: &[Instruction]) -> Result<String> {
     |        ^^^^^^^^^^^^^^^^^^^^

warning: `seen_concurrency` (lib) generated 33 warnings (run `cargo fix --lib -p seen_concurrency` to apply 7 suggestions)
warning: `seen_typechecker` (lib) generated 4 warnings (run `cargo fix --lib -p seen_typechecker` to apply 1 suggestion)
warning: `seen_effects` (lib) generated 12 warnings (run `cargo fix --lib -p seen_effects` to apply 9 suggestions)
warning: `seen_ir` (lib) generated 25 warnings (run `cargo fix --lib -p seen_ir` to apply 9 suggestions)
warning: unused import: `std::collections::HashMap`
 --> seen_memory_manager/src/memory_manager.rs:7:5
  |
7 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `OwnershipError`
  --> seen_memory_manager/src/regions.rs:10:39
   |
10 | use crate::ownership::{OwnershipInfo, OwnershipError};
   |                                       ^^^^^^^^^^^^^^

warning: unused variable: `result`
   --> seen_memory_manager/src/memory_manager.rs:382:33
    |
382 |     fn check_double_free(&self, result: &mut MemoryAnalysisResult) {
    |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `var_name`
   --> seen_memory_manager/src/memory_manager.rs:391:14
    |
391 |         for (var_name, var_info) in &result.ownership_info.variables {
    |              ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_var_name`

warning: unused variable: `pos`
   --> seen_memory_manager/src/regions.rs:413:44
    |
413 |             Expression::Let { name, value, pos, .. } => {
    |                                            ^^^-
    |                                            |
    |                                            help: try removing the field

warning: field `ownership_info` is never read
   --> seen_memory_manager/src/regions.rs:374:5
    |
370 | pub struct RegionAnalyzer {
    |            -------------- field in this struct
...
374 |     ownership_info: Option<OwnershipInfo>,
    |     ^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: unused import: `Duration`
  --> seen_reactive/src/observable.rs:10:17
   |
10 | use std::time::{Duration, Instant};
   |                 ^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `futures::stream::Stream`
  --> seen_reactive/src/observable.rs:11:5
   |
11 | use futures::stream::Stream;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Weak`
  --> seen_reactive/src/properties.rs:10:29
   |
10 | use std::sync::{Arc, Mutex, Weak};
   |                             ^^^^

warning: unused import: `std::any::Any`
  --> seen_reactive/src/properties.rs:12:5
   |
12 | use std::any::Any;
   |     ^^^^^^^^^^^^^

warning: unused imports: `ObservableId` and `Observable`
  --> seen_reactive/src/properties.rs:16:25
   |
16 | use crate::observable::{Observable, ObservableId};
   |                         ^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> seen_reactive/src/flow.rs:10:5
   |
10 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Context` and `Poll`
  --> seen_reactive/src/flow.rs:11:17
   |
11 | use std::task::{Context, Poll};
   |                 ^^^^^^^  ^^^^

warning: unused import: `futures::Stream`
  --> seen_reactive/src/flow.rs:12:5
   |
12 | use futures::Stream;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `seen_concurrency::types::*`
  --> seen_reactive/src/flow.rs:13:5
   |
13 | use seen_concurrency::types::*;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_reactive/src/lib.rs:20:17
   |
20 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: unused import: `AsyncResult`
  --> seen_reactive/src/lib.rs:22:55
   |
22 | use seen_concurrency::types::{AsyncValue, AsyncError, AsyncResult};
   |                                                       ^^^^^^^^^^^

warning: unused import: `std::time::Duration`
   --> seen_reactive/src/lib.rs:223:9
    |
223 |     use std::time::Duration;
    |         ^^^^^^^^^^^^^^^^^^^

warning: unused variable: `interval`
   --> seen_reactive/src/flow.rs:186:18
    |
186 |     pub fn timer(interval: Duration, max_count: Option<usize>) -> Flow<u64> {
    |                  ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_interval`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: fields `flows` and `config` are never read
  --> seen_reactive/src/lib.rs:32:5
   |
26 | pub struct ReactiveRuntime {
   |            --------------- fields in this struct
...
32 |     flows: HashMap<flow::FlowId, Box<dyn std::any::Any + Send>>,
   |     ^^^^^
33 |     /// Runtime configuration
34 |     config: ReactiveRuntimeConfig,
   |     ^^^^^^
   |
   = note: `ReactiveRuntime` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `next_id` is never read
   --> seen_reactive/src/observable.rs:246:5
    |
244 | pub struct ObservableFactory {
    |            ----------------- field in this struct
245 |     /// Next observable ID
246 |     next_id: u64,
    |     ^^^^^^^
    |
    = note: `ObservableFactory` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `property_type` is never read
  --> seen_reactive/src/properties.rs:71:5
   |
57 | pub struct ComputedProperty {
   |            ---------------- field in this struct
...
71 |     property_type: Type,
   |     ^^^^^^^^^^^^^
   |
   = note: `ComputedProperty` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `next_property_id` and `next_observer_id` are never read
   --> seen_reactive/src/properties.rs:197:5
    |
189 | pub struct ReactivePropertyManager {
    |            ----------------------- fields in this struct
...
197 |     next_property_id: u64,
    |     ^^^^^^^^^^^^^^^^
198 |     /// Next available observer ID
199 |     next_observer_id: u64,
    |     ^^^^^^^^^^^^^^^^
    |
    = note: `ReactivePropertyManager` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `next_id` is never read
   --> seen_reactive/src/flow.rs:151:5
    |
149 | pub struct FlowFactory {
    |            ----------- field in this struct
150 |     /// Next flow ID
151 |     next_id: FlowId,
    |     ^^^^^^^
    |
    = note: `FlowFactory` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: `seen_memory_manager` (lib) generated 6 warnings (run `cargo fix --lib -p seen_memory_manager` to apply 3 suggestions)
warning: `seen_reactive` (lib) generated 18 warnings (run `cargo fix --lib -p seen_reactive` to apply 12 suggestions)
warning: unused imports: `Deserialize` and `Serialize`
 --> seen_interpreter/src/value.rs:5:13
  |
5 | use serde::{Serialize, Deserialize};
  |             ^^^^^^^^^  ^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Flow`, `Observable`, and `ReactiveProperty`
 --> seen_interpreter/src/value.rs:8:21
  |
8 | use seen_reactive::{Observable, Flow, ReactiveProperty};
  |                     ^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^^^^

warning: unused imports: `ActorRef`, `Promise`, and `TaskId`
 --> seen_interpreter/src/interpreter.rs:7:13
  |
7 |     types::{Promise, TaskPriority, AsyncValue, TaskId, ActorRef, AsyncError, AsyncResult},
  |             ^^^^^^^                            ^^^^^^  ^^^^^^^^

warning: unused imports: `Flow`, `Observable`, `ReactiveProperty`, and `properties::PropertyId`
  --> seen_interpreter/src/interpreter.rs:18:5
   |
18 |     Observable, Flow, ReactiveProperty,
   |     ^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^^^^
19 |     properties::PropertyId,
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:474:13
    |
130 |             Expression::FloatLiteral { value, .. } => Ok(Value::Float(*value)),
    |             -------------------------------------- matches all the relevant values
...
474 |             Expression::FloatLiteral { value, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:478:13
    |
385 |             Expression::InterpolatedString { parts, .. } => {
    |             -------------------------------------------- matches all the relevant values
...
478 |             Expression::InterpolatedString { parts, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:492:13
    |
153 |             Expression::UnaryOp { op, operand, pos } => {
    |             ---------------------------------------- matches all the relevant values
...
492 |             Expression::UnaryOp { op, operand, pos } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:504:13
    |
389 |             Expression::Elvis { nullable, default, .. } => {
    |             ------------------------------------------- matches all the relevant values
...
504 |             Expression::Elvis { nullable, default, pos } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:513:13
    |
305 |             Expression::IndexAccess { object, index, pos } => {
    |             ---------------------------------------------- matches all the relevant values
...
513 |             Expression::IndexAccess { object, index, pos, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:535:13
    |
286 |             Expression::Lambda { params, body, .. } => {
    |             --------------------------------------- matches all the relevant values
...
535 |             Expression::Lambda { params, body, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: value assigned to `last_value` is never read
   --> seen_interpreter/src/interpreter.rs:201:25
    |
201 |                 let mut last_value = Value::Unit;
    |                         ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `pos`
   --> seen_interpreter/src/interpreter.rs:433:56
    |
433 |             Expression::Receive { pattern: _, handler, pos } => {
    |                                                        ^^^ help: try ignoring the field: `pos: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `pos`
   --> seen_interpreter/src/interpreter.rs:504:52
    |
504 |             Expression::Elvis { nullable, default, pos } => {
    |                                                    ^^^ help: try ignoring the field: `pos: _`

warning: unused variable: `pos`
   --> seen_interpreter/src/interpreter.rs:546:61
    |
546 |             Expression::Try { body, catch_clauses, finally, pos, .. } => {
    |                                                             ^^^-
    |                                                             |
    |                                                             help: try removing the field

warning: unused variable: `promise`
   --> seen_interpreter/src/interpreter.rs:904:28
    |
904 |             Value::Promise(promise) => {
    |                            ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_promise`

warning: unused variable: `task_id`
   --> seen_interpreter/src/interpreter.rs:919:25
    |
919 |             Value::Task(task_id) => {
    |                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_task_id`

warning: unused variable: `actor_system`
    --> seen_interpreter/src/interpreter.rs:1076:13
     |
1076 |         let actor_system = self.runtime.actor_system();
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_actor_system`

warning: unused variable: `pos`
    --> seen_interpreter/src/interpreter.rs:1071:104
     |
1071 | ...ring, seen_parser::ast::Type)], pos: Position) -> InterpreterResult<Value> {
     |                                    ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `advanced_runtime`
    --> seen_interpreter/src/interpreter.rs:1201:13
     |
1201 |         let advanced_runtime = self.runtime.advanced_runtime();
     |             ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_advanced_runtime`

warning: unused variable: `effect_handle`
    --> seen_interpreter/src/interpreter.rs:1227:13
     |
1227 |         let effect_handle = Value::EffectHandle {
     |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_effect_handle`

warning: unused variable: `effect`
    --> seen_interpreter/src/interpreter.rs:1208:55
     |
1208 |     fn interpret_handle(&mut self, body: &Expression, effect: &str, handlers: &[seen_parser::ast::EffectHandler], pos: Position) -> Inter...
     |                                                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_effect`

warning: unused variable: `pos`
    --> seen_interpreter/src/interpreter.rs:1208:115
     |
1208 | ...en_parser::ast::EffectHandler], pos: Position) -> InterpreterResult<Value> {
     |                                    ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `pos`
    --> seen_interpreter/src/interpreter.rs:1328:62
     |
1328 |     fn interpret_flow_creation(&mut self, body: &Expression, pos: Position) -> InterpreterResult<Value> {
     |                                                              ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `obs`
    --> seen_interpreter/src/interpreter.rs:1395:31
     |
1395 |             Value::Observable(obs) => {
     |                               ^^^ help: if this is intentional, prefix it with an underscore: `_obs`

warning: field `is_function_scope` is never read
  --> seen_interpreter/src/runtime.rs:41:5
   |
38 | pub struct Environment {
   |            ----------- field in this struct
...
41 |     is_function_scope: bool,
   |     ^^^^^^^^^^^^^^^^^
   |
   = note: `Environment` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `task_counter` is never read
  --> seen_interpreter/src/interpreter.rs:84:5
   |
72 | pub struct Interpreter {
   |            ----------- field in this struct
...
84 |     task_counter: std::sync::atomic::AtomicU64,
   |     ^^^^^^^^^^^^

warning: `seen_interpreter` (lib) generated 26 warnings (run `cargo fix --lib -p seen_interpreter` to apply 5 suggestions)
warning: unused variable: `uri`
  --> seen_lsp/src/lib.rs:75:38
   |
75 |     async fn analyze_document(&self, uri: &Url, content: &str) -> Vec<Diagnostic> {
   |                                      ^^^ help: if this is intentional, prefix it with an underscore: `_uri`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `language`
  --> seen_lsp/src/lib.rs:79:13
   |
79 |         let language = self.language_config.read().await.clone();
   |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_language`

warning: variable does not need to be mutable
  --> seen_lsp/src/lib.rs:83:13
   |
83 |         let mut lexer = Lexer::new(content.to_string(), keyword_manager);
   |             ----^^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: use of deprecated field `tower_lsp::lsp_types::SymbolInformation::deprecated`: Use tags instead
   --> seen_lsp/src/lib.rs:997:21
    |
997 |                     deprecated: None,
    |                     ^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: variable does not need to be mutable
   --> seen_lsp/src/lib.rs:707:13
    |
707 |         let mut lexer = Lexer::new(content.clone(), keyword_manager);
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> seen_lsp/src/lib.rs:750:17
    |
750 |             let mut lexer = Lexer::new(content.clone(), keyword_manager);
    |                 ----^^^^^
    |                 |
    |                 help: remove this `mut`

warning: field `references` is never read
  --> seen_lsp/src/lib.rs:31:5
   |
23 | struct SymbolInfo {
   |        ---------- field in this struct
...
31 |     references: Vec<Location>,
   |     ^^^^^^^^^^
   |
   = note: `SymbolInfo` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `type_info` is never read
  --> seen_lsp/src/lib.rs:44:5
   |
36 | struct DocumentInfo {
   |        ------------ field in this struct
...
44 |     type_info: Option<TypeCheckResult>,
   |     ^^^^^^^^^
   |
   = note: `DocumentInfo` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `global_symbols` is never read
  --> seen_lsp/src/lib.rs:60:5
   |
52 | pub struct SeenLanguageServer {
   |            ------------------ field in this struct
...
60 |     global_symbols: Arc<RwLock<HashMap<String, Vec<SymbolInfo>>>>,
   |     ^^^^^^^^^^^^^^

warning: `seen_lsp` (lib) generated 9 warnings (run `cargo fix --lib -p seen_lsp` to apply 3 suggestions)
warning: unused variable: `program`
   --> seen_cli/src/main.rs:962:75
    |
962 | fn run_single_test(interpreter: &mut Interpreter, test_func: &Expression, program: &Program) -> Result<()> {
    |                                                                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_program`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: `seen_cli` (bin "seen_cli") generated 1 warning
    Finished `release` profile [optimized] target(s) in 2.04s
     Running `target/release/seen_cli build compiler_seen/src/main_compiler.seen -o stage1_compiler.c`
Compiling compiler_seen/src/main_compiler.seen with optimization level 0
Error: Failed to parse source

Caused by:
    Unexpected token: found EOF, expected end of expression
[0;31m❌ STAGE 1 FAILED: No C code generated[0m
Fri Aug 15 23:45:40 +03 2025: Starting bootstrap verification
Working directory: /mnt/d/Projects/Rust/seenlang
[0;32m✅ Seen compiler source found[0m
[0;32m✅ Rust bootstrap compiler ready[0m
[0;32m✅ clang compiler available[0m
🧹 Cleaning up previous bootstrap attempts...
[0;34mUsing Rust bootstrap compiler to compile Seen compiler[0m
Command: cargo run -p seen_cli --release -- build compiler_seen/src/main_compiler.seen -o stage1_compiler.c
warning: /mnt/d/Projects/Rust/seenlang/Cargo.toml: `panic` setting is ignored for `bench` profile
warning: /mnt/d/Projects/Rust/seenlang/Cargo.toml: `panic` setting is ignored for `test` profile
warning: unused variable: `pos`
   --> seen_parser/src/parser.rs:435:75
    |
435 |                     else if let Expression::Identifier { name, is_public, pos } = &expr {
    |                                                                           ^^^ help: try ignoring the field: `pos: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `pos`
    --> seen_parser/src/parser.rs:3562:13
     |
3562 |         let pos = self.current.position.clone();
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `pos`
    --> seen_parser/src/parser.rs:3586:13
     |
3586 |         let pos = self.current.position.clone();
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `pos`
    --> seen_parser/src/parser.rs:3708:13
     |
3708 |         let pos = self.current.position.clone();
     |             ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: variable does not need to be mutable
    --> seen_parser/src/parser.rs:3891:13
     |
3891 |         let mut iter = arms.into_iter().rev();
     |             ----^^^^
     |             |
     |             help: remove this `mut`
     |
     = note: `#[warn(unused_mut)]` on by default

warning: variants `Statement` and `Expression` are never constructed
  --> seen_parser/src/parser.rs:15:5
   |
13 | enum ParsingContext {
   |      -------------- variants in this enum
14 |     TopLevel,
15 |     Statement,
   |     ^^^^^^^^^
16 |     Expression,
   |     ^^^^^^^^^^
   |
   = note: `ParsingContext` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `parsing_context` is never read
  --> seen_parser/src/parser.rs:23:5
   |
19 | pub struct Parser {
   |            ------ field in this struct
...
23 |     parsing_context: ParsingContext,
   |     ^^^^^^^^^^^^^^^

warning: methods `try_parse_literal`, `is_type_at_lookahead`, `parse_class`, `parse_when`, and `convert_when_to_if_chain` are never used
    --> seen_parser/src/parser.rs:2284:8
     |
26   | impl Parser {
     | ----------- methods in this implementation
...
2284 |     fn try_parse_literal(&mut self) -> ParseResult<Expression> {
     |        ^^^^^^^^^^^^^^^^^
...
2687 |     fn is_type_at_lookahead(&mut self, _distance: usize) -> bool {
     |        ^^^^^^^^^^^^^^^^^^^^
...
3450 |     fn parse_class(&mut self) -> ParseResult<Expression> {
     |        ^^^^^^^^^^^
...
3609 |     fn parse_when(&mut self) -> ParseResult<Expression> {
     |        ^^^^^^^^^^
...
3883 |     fn convert_when_to_if_chain(&self, arms: Vec<MatchArm>, pos: Position) -> ParseResult<Expression> {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^

warning: `seen_parser` (lib) generated 8 warnings (run `cargo fix --lib -p seen_parser` to apply 1 suggestion)
warning: unreachable pattern
   --> seen_typechecker/src/checker.rs:246:13
    |
222 |             Expression::StructLiteral { name, fields, pos } => {
    |             ----------------------------------------------- matches all the relevant values
...
246 |             Expression::StructLiteral { name, fields, pos } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `pos`
   --> seen_typechecker/src/checker.rs:831:87
    |
831 |     fn check_interface_definition(&mut self, name: &str, methods: &[InterfaceMethod], pos: Position) -> Type {
    |                                                                                       ^^^ help: if this is intentional, prefix it with an underscore: `_pos`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `then_branch`
   --> seen_typechecker/src/smart_cast.rs:139:44
    |
139 |         if let Expression::If { condition, then_branch, else_branch, .. } = if_expr {
    |                                            ^^^^^^^^^^^-
    |                                            |
    |                                            help: try removing the field

warning: methods `remove_smart_cast` and `with_smart_casts` are never used
   --> seen_typechecker/src/checker.rs:99:8
    |
25  | impl Environment {
    | ---------------- methods in this implementation
...
99  |     fn remove_smart_cast(&mut self, name: &str) {
    |        ^^^^^^^^^^^^^^^^^
...
104 |     fn with_smart_casts(&self) -> Environment {
    |        ^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: unused import: `seen_parser::ast::Expression`
  --> seen_concurrency/src/async_runtime.rs:13:5
   |
13 | use seen_parser::ast::Expression;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `AsyncResult`
  --> seen_concurrency/src/channels.rs:14:44
   |
14 | use crate::types::{AsyncValue, AsyncError, AsyncResult, ChannelId, TaskId};
   |                                            ^^^^^^^^^^^

warning: unused import: `Condvar`
  --> seen_concurrency/src/actors.rs:11:29
   |
11 | use std::sync::{Arc, Mutex, Condvar};
   |                             ^^^^^^^

warning: unused import: `Duration`
  --> seen_concurrency/src/actors.rs:12:17
   |
12 | use std::time::{Duration, Instant, SystemTime};
   |                 ^^^^^^^^

warning: unused import: `TaskId`
  --> seen_concurrency/src/actors.rs:17:5
   |
17 |     TaskId, TaskPriority, Mailbox
   |     ^^^^^^

warning: unused import: `AsyncResult`
  --> seen_concurrency/src/select.rs:14:40
   |
14 |     ChannelId, AsyncValue, AsyncError, AsyncResult, TaskId
   |                                        ^^^^^^^^^^^

warning: unused variable: `runtime`
  --> seen_concurrency/src/async_functions.rs:92:9
   |
92 |         runtime: &mut AsyncRuntime,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_runtime`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `name`
   --> seen_concurrency/src/async_functions.rs:239:41
    |
239 |             Expression::StructLiteral { name, fields, .. } => {
    |                                         ^^^^-
    |                                         |
    |                                         help: try removing the field

warning: unused variable: `expr`
   --> seen_concurrency/src/async_functions.rs:340:9
    |
340 |         expr: &Expression,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_expr`

warning: unused variable: `task_id`
   --> seen_concurrency/src/async_runtime.rs:290:28
    |
290 |     fn create_waker(&self, task_id: TaskId) -> Waker {
    |                            ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_task_id`

warning: unused variable: `pattern`
   --> seen_concurrency/src/channels.rs:485:51
    |
485 |                 SelectCase::Receive { channel_id, pattern } => {
    |                                                   ^^^^^^^ help: try ignoring the field: `pattern: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/channels.rs:486:33
    |
486 |                     if let Some(channel) = self.channels.get(channel_id) {
    |                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `value`
   --> seen_concurrency/src/channels.rs:492:48
    |
492 |                 SelectCase::Send { channel_id, value } => {
    |                                                ^^^^^ help: try ignoring the field: `value: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/channels.rs:493:33
    |
493 |                     if let Some(channel) = self.channels.get(channel_id) {
    |                                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `channel_type`
   --> seen_concurrency/src/channels.rs:560:5
    |
560 |     channel_type: &Type,
    |     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel_type`

warning: unused variable: `handler_result`
   --> seen_concurrency/src/actors.rs:368:13
    |
368 |         let handler_result: AsyncResult = match &handler.handler {
    |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler_result`

warning: unused variable: `payload`
   --> seen_concurrency/src/actors.rs:532:70
    |
532 |     pub fn send_message(&mut self, target: ActorId, message: String, payload: AsyncValue) -> Result<(), AsyncError> {
    |                                                                      ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_payload`

warning: unused variable: `payload`
   --> seen_concurrency/src/actors.rs:548:9
    |
548 |         payload: AsyncValue,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_payload`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:115:9
    |
115 |         handler: Expression,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: unused variable: `position`
   --> seen_concurrency/src/select.rs:116:9
    |
116 |         position: Position,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_position`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:130:9
    |
130 |         handler: Expression,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: unused variable: `position`
   --> seen_concurrency/src/select.rs:131:9
    |
131 |         position: Position,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_position`

warning: unused variable: `pattern`
   --> seen_concurrency/src/select.rs:300:47
    |
300 |             SelectCase::Receive { channel_id, pattern } => {
    |                                               ^^^^^^^ help: try ignoring the field: `pattern: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/select.rs:302:29
    |
302 |                 if let Some(channel) = self.channel_manager.get_channel(*channel_id) {
    |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `value`
   --> seen_concurrency/src/select.rs:310:44
    |
310 |             SelectCase::Send { channel_id, value } => {
    |                                            ^^^^^ help: try ignoring the field: `value: _`

warning: unused variable: `channel`
   --> seen_concurrency/src/select.rs:312:29
    |
312 |                 if let Some(channel) = self.channel_manager.get_channel(*channel_id) {
    |                             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_channel`

warning: unused variable: `duration`
   --> seen_concurrency/src/select.rs:320:35
    |
320 |             SelectCase::Timeout { duration } => {
    |                                   ^^^^^^^^ help: try ignoring the field: `duration: _`

warning: unused variable: `receiver`
   --> seen_concurrency/src/select.rs:408:22
    |
408 |         let (sender, receiver) = self.channel_manager.create_channel::<T>(capacity);
    |                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_receiver`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:445:13
    |
445 |             handler: Expression,
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: unused variable: `handler`
   --> seen_concurrency/src/select.rs:459:13
    |
459 |             handler: Expression,
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_handler`

warning: fields `sender_count` and `receiver_count` are never read
  --> seen_concurrency/src/channels.rs:30:5
   |
18 | pub struct Channel<T> {
   |            ------- fields in this struct
...
30 |     sender_count: Arc<Mutex<usize>>,
   |     ^^^^^^^^^^^^
31 |     /// Number of active receivers
32 |     receiver_count: Arc<Mutex<usize>>,
   |     ^^^^^^^^^^^^^^
   |
   = note: `Channel` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `next_channel_id` is never read
   --> seen_concurrency/src/channels.rs:101:5
    |
97  | pub struct ChannelManager {
    |            -------------- field in this struct
...
101 |     next_channel_id: u64,
    |     ^^^^^^^^^^^^^^^
    |
    = note: `ChannelManager` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `system_supervisor` is never read
   --> seen_concurrency/src/actors.rs:172:5
    |
164 | pub struct ActorSystem {
    |            ----------- field in this struct
...
172 |     system_supervisor: Option<ActorId>,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `ActorSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: unused imports: `Any` and `TypeId`
  --> seen_effects/src/effects.rs:12:16
   |
12 | use std::any::{Any, TypeId};
   |                ^^^  ^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Expression`
  --> seen_effects/src/effects.rs:14:24
   |
14 | use seen_parser::ast::{Expression, Type};
   |                        ^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_effects/src/contracts.rs:11:17
   |
11 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: unused import: `Type`
  --> seen_effects/src/contracts.rs:14:36
   |
14 | use seen_parser::ast::{Expression, Type, BinaryOperator};
   |                                    ^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_effects/src/metaprogramming.rs:11:17
   |
11 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: unused imports: `Any` and `TypeId`
  --> seen_effects/src/metaprogramming.rs:12:16
   |
12 | use std::any::{Any, TypeId};
   |                ^^^  ^^^^^^

warning: unused import: `Type`
  --> seen_effects/src/metaprogramming.rs:15:36
   |
15 | use seen_parser::ast::{Expression, Type};
   |                                    ^^^^

warning: unused imports: `AsyncError`, `AsyncResult`, and `AsyncValue`
  --> seen_effects/src/metaprogramming.rs:16:20
   |
16 | use crate::types::{AsyncValue, AsyncError, AsyncResult};
   |                    ^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_effects/src/lib.rs:25:17
   |
25 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: fields `next_effect_id` and `next_operation_id` are never read
   --> seen_effects/src/effects.rs:306:5
    |
298 | pub struct EffectSystem {
    |            ------------ fields in this struct
...
306 |     next_effect_id: u64,
    |     ^^^^^^^^^^^^^^
307 |     /// Next available operation ID
308 |     next_operation_id: u64,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `EffectSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
    = note: `#[warn(dead_code)]` on by default

warning: fields `next_contract_id`, `next_precondition_id`, `next_postcondition_id`, and `next_invariant_id` are never read
   --> seen_effects/src/contracts.rs:304:5
    |
294 | pub struct ContractSystem {
    |            -------------- fields in this struct
...
304 |     next_contract_id: u64,
    |     ^^^^^^^^^^^^^^^^
305 |     next_precondition_id: u64,
    |     ^^^^^^^^^^^^^^^^^^^^
306 |     next_postcondition_id: u64,
    |     ^^^^^^^^^^^^^^^^^^^^^
307 |     next_invariant_id: u64,
    |     ^^^^^^^^^^^^^^^^^
    |
    = note: `ContractSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `next_macro_id` and `next_template_id` are never read
   --> seen_effects/src/metaprogramming.rs:412:5
    |
399 | pub struct MetaprogrammingSystem {
    |            --------------------- fields in this struct
...
412 |     next_macro_id: u64,
    |     ^^^^^^^^^^^^^
413 |     next_template_id: u64,
    |     ^^^^^^^^^^^^^^^^
    |
    = note: `MetaprogrammingSystem` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: unused import: `Label`
 --> seen_ir/src/function.rs:6:56
  |
6 | use crate::instruction::{BasicBlock, ControlFlowGraph, Label};
  |                                                        ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `IRValue`
   --> seen_ir/src/function.rs:266:34
    |
266 |         use crate::{Instruction, IRValue};
    |                                  ^^^^^^^

warning: unused imports: `BasicBlock` and `Parameter`
  --> seen_ir/src/generator.rs:9:32
   |
9  |     instruction::{Instruction, BasicBlock, Label, BinaryOp, UnaryOp},
   |                                ^^^^^^^^^^
10 |     function::{IRFunction, Parameter},
   |                            ^^^^^^^^^

warning: unused imports: `BasicBlock` and `IRType`
 --> seen_ir/src/optimizer.rs:6:32
  |
6 |     instruction::{Instruction, BasicBlock, BinaryOp, UnaryOp},
  |                                ^^^^^^^^^^
7 |     value::{IRValue, IRType},
  |                      ^^^^^^

warning: unused import: `std::collections::HashMap`
 --> seen_ir/src/cfg_builder.rs:4:5
  |
4 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `UnaryOp`
 --> seen_ir/src/simple_codegen.rs:7:54
  |
7 |     instruction::{Instruction, BasicBlock, BinaryOp, UnaryOp},
  |                                                      ^^^^^^^

warning: unused variable: `name`
   --> seen_ir/src/value.rs:197:33
    |
197 |             IRValue::Function { name, parameters } => {
    |                                 ^^^^ help: try ignoring the field: `name: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `ensures`
   --> seen_ir/src/generator.rs:175:70
    |
175 |                 Expression::ContractedFunction { function, requires, ensures, invariants, .. } => {
    |                                                                      ^^^^^^^-
    |                                                                      |
    |                                                                      help: try removing the field

warning: unused variable: `invariants`
   --> seen_ir/src/generator.rs:175:79
    |
175 |                 Expression::ContractedFunction { function, requires, ensures, invariants, .. } => {
    |                                                                               ^^^^^^^^^^-
    |                                                                               |
    |                                                                               help: try removing the field

warning: unused variable: `contract_body`
   --> seen_ir/src/generator.rs:180:33
    |
180 |                         let mut contract_body: Vec<Instruction> = Vec::new();
    |                                 ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_contract_body`

warning: variable does not need to be mutable
   --> seen_ir/src/generator.rs:180:29
    |
180 |                         let mut contract_body: Vec<Instruction> = Vec::new();
    |                             ----^^^^^^^^^^^^^
    |                             |
    |                             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `reference_type`
    --> seen_ir/src/generator.rs:1104:13
     |
1104 |         let reference_type = IRType::Pointer(Box::new(source_type));
     |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_reference_type`

warning: unused variable: `receiver_type`
    --> seen_ir/src/generator.rs:1320:13
     |
1320 |         let receiver_type = if !params.is_empty() {
     |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_receiver_type`

warning: unused variable: `body_value`
    --> seen_ir/src/generator.rs:1354:14
     |
1354 |         let (body_value, body_instructions) = self.generate_expression(body)?;
     |              ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_body_value`

warning: unused variable: `extract_label`
    --> seen_ir/src/generator.rs:1522:29
     |
1522 |                         let extract_label = self.context.create_label("extract_fields");
     |                             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_extract_label`

warning: unused variable: `finish_current_block`
  --> seen_ir/src/cfg_builder.rs:18:9
   |
18 |     let finish_current_block = |current_block: Option<BasicBlock>, cfg: &mut ControlFlowGraph| {
   |         ^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_finish_current_block`

warning: unreachable pattern
   --> seen_ir/src/simple_codegen.rs:239:21
    |
223 |                     Instruction::Store { value, dest } => {
    |                     ---------------------------------- matches all the relevant values
...
239 |                     Instruction::Store { value: IRValue::Register(src_reg), dest: IRValue::Variable(name) } => {
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unused variable: `left`
   --> seen_ir/src/simple_codegen.rs:211:49
    |
211 |                     Instruction::StringConcat { left, right, result } => {
    |                                                 ^^^^ help: try ignoring the field: `left: _`

warning: unused variable: `right`
   --> seen_ir/src/simple_codegen.rs:211:55
    |
211 |                     Instruction::StringConcat { left, right, result } => {
    |                                                       ^^^^^ help: try ignoring the field: `right: _`

warning: unreachable pattern
   --> seen_ir/src/simple_codegen.rs:436:21
    |
436 |                     _ => return Err(CodeGenError::UnsupportedInstruction(format!("Binary op: {:?}", op))),
    |                     ^ no value can reach this
    |
note: multiple earlier patterns match some of the same values
   --> seen_ir/src/simple_codegen.rs:436:21
    |
418 |                     BinaryOp::Add => "+",
    |                     ------------- matches some of the same values
419 |                     BinaryOp::Subtract => "-",
    |                     ------------------ matches some of the same values
420 |                     BinaryOp::Multiply => "*",
    |                     ------------------ matches some of the same values
421 |                     BinaryOp::Divide => "/",
    |                     ---------------- matches some of the same values
...
436 |                     _ => return Err(CodeGenError::UnsupportedInstruction(format!("Binary op: {:?}", op))),
    |                     ^ ...and 14 other patterns collectively make this unreachable

warning: unused variable: `left`
   --> seen_ir/src/simple_codegen.rs:853:78
    |
853 |                 Instruction::Binary { op: crate::instruction::BinaryOp::Add, left, right: IRValue::Integer(1), .. }
    |                                                                              ^^^^ help: try ignoring the field: `left: _`

warning: unused variable: `terminator`
   --> seen_ir/src/simple_codegen.rs:813:73
    |
813 |     fn generate_for_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
    |                                                                         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_terminator`

warning: unused variable: `terminator`
   --> seen_ir/src/simple_codegen.rs:924:75
    |
924 |     fn generate_while_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
    |                                                                           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_terminator`

warning: methods `optimize_loop_invariants` and `optimize_loop_unrolling` are never used
   --> seen_ir/src/optimizer.rs:434:8
    |
58  | impl IROptimizer {
    | ---------------- methods in this implementation
...
434 |     fn optimize_loop_invariants(&mut self, _function: &mut IRFunction) -> IRResult<()> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
...
448 |     fn optimize_loop_unrolling(&mut self, _function: &mut IRFunction) -> IRResult<()> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: methods `generate_for_loop_block`, `generate_while_loop_block`, `generate_if_else_block`, `count_if_else_instructions`, `find_result_assignment`, and `find_result_variable` are never used
    --> seen_ir/src/simple_codegen.rs:813:8
     |
78   | impl CCodeGenerator {
     | ------------------- methods in this implementation
...
813  |     fn generate_for_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
     |        ^^^^^^^^^^^^^^^^^^^^^^^
...
924  |     fn generate_while_loop_block(&mut self, instructions: &[Instruction], terminator: &Option<Instruction>) -> Result<Option<String>> {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^
...
1016 |     fn generate_if_else_block(&self, instructions: &[Instruction]) -> Result<Option<String>> {
     |        ^^^^^^^^^^^^^^^^^^^^^^
...
1110 |     fn count_if_else_instructions(&self, instructions: &[Instruction]) -> usize {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
...
1132 |     fn find_result_assignment(&self, instructions: &[Instruction]) -> Option<IRValue> {
     |        ^^^^^^^^^^^^^^^^^^^^^^
...
1142 |     fn find_result_variable(&self, instructions: &[Instruction]) -> Result<String> {
     |        ^^^^^^^^^^^^^^^^^^^^

warning: `seen_typechecker` (lib) generated 4 warnings (run `cargo fix --lib -p seen_typechecker` to apply 1 suggestion)
warning: `seen_concurrency` (lib) generated 33 warnings (run `cargo fix --lib -p seen_concurrency` to apply 7 suggestions)
warning: `seen_effects` (lib) generated 12 warnings (run `cargo fix --lib -p seen_effects` to apply 9 suggestions)
warning: `seen_ir` (lib) generated 25 warnings (run `cargo fix --lib -p seen_ir` to apply 9 suggestions)
warning: unused import: `std::collections::HashMap`
 --> seen_memory_manager/src/memory_manager.rs:7:5
  |
7 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `OwnershipError`
  --> seen_memory_manager/src/regions.rs:10:39
   |
10 | use crate::ownership::{OwnershipInfo, OwnershipError};
   |                                       ^^^^^^^^^^^^^^

warning: unused variable: `result`
   --> seen_memory_manager/src/memory_manager.rs:382:33
    |
382 |     fn check_double_free(&self, result: &mut MemoryAnalysisResult) {
    |                                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `var_name`
   --> seen_memory_manager/src/memory_manager.rs:391:14
    |
391 |         for (var_name, var_info) in &result.ownership_info.variables {
    |              ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_var_name`

warning: unused variable: `pos`
   --> seen_memory_manager/src/regions.rs:413:44
    |
413 |             Expression::Let { name, value, pos, .. } => {
    |                                            ^^^-
    |                                            |
    |                                            help: try removing the field

warning: field `ownership_info` is never read
   --> seen_memory_manager/src/regions.rs:374:5
    |
370 | pub struct RegionAnalyzer {
    |            -------------- field in this struct
...
374 |     ownership_info: Option<OwnershipInfo>,
    |     ^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: unused import: `Duration`
  --> seen_reactive/src/observable.rs:10:17
   |
10 | use std::time::{Duration, Instant};
   |                 ^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `futures::stream::Stream`
  --> seen_reactive/src/observable.rs:11:5
   |
11 | use futures::stream::Stream;
   |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Weak`
  --> seen_reactive/src/properties.rs:10:29
   |
10 | use std::sync::{Arc, Mutex, Weak};
   |                             ^^^^

warning: unused import: `std::any::Any`
  --> seen_reactive/src/properties.rs:12:5
   |
12 | use std::any::Any;
   |     ^^^^^^^^^^^^^

warning: unused imports: `ObservableId` and `Observable`
  --> seen_reactive/src/properties.rs:16:25
   |
16 | use crate::observable::{Observable, ObservableId};
   |                         ^^^^^^^^^^  ^^^^^^^^^^^^

warning: unused import: `std::pin::Pin`
  --> seen_reactive/src/flow.rs:10:5
   |
10 | use std::pin::Pin;
   |     ^^^^^^^^^^^^^

warning: unused imports: `Context` and `Poll`
  --> seen_reactive/src/flow.rs:11:17
   |
11 | use std::task::{Context, Poll};
   |                 ^^^^^^^  ^^^^

warning: unused import: `futures::Stream`
  --> seen_reactive/src/flow.rs:12:5
   |
12 | use futures::Stream;
   |     ^^^^^^^^^^^^^^^

warning: unused import: `seen_concurrency::types::*`
  --> seen_reactive/src/flow.rs:13:5
   |
13 | use seen_concurrency::types::*;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Arc` and `Mutex`
  --> seen_reactive/src/lib.rs:20:17
   |
20 | use std::sync::{Arc, Mutex};
   |                 ^^^  ^^^^^

warning: unused import: `AsyncResult`
  --> seen_reactive/src/lib.rs:22:55
   |
22 | use seen_concurrency::types::{AsyncValue, AsyncError, AsyncResult};
   |                                                       ^^^^^^^^^^^

warning: unused import: `std::time::Duration`
   --> seen_reactive/src/lib.rs:223:9
    |
223 |     use std::time::Duration;
    |         ^^^^^^^^^^^^^^^^^^^

warning: unused variable: `interval`
   --> seen_reactive/src/flow.rs:186:18
    |
186 |     pub fn timer(interval: Duration, max_count: Option<usize>) -> Flow<u64> {
    |                  ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_interval`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: fields `flows` and `config` are never read
  --> seen_reactive/src/lib.rs:32:5
   |
26 | pub struct ReactiveRuntime {
   |            --------------- fields in this struct
...
32 |     flows: HashMap<flow::FlowId, Box<dyn std::any::Any + Send>>,
   |     ^^^^^
33 |     /// Runtime configuration
34 |     config: ReactiveRuntimeConfig,
   |     ^^^^^^
   |
   = note: `ReactiveRuntime` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `next_id` is never read
   --> seen_reactive/src/observable.rs:246:5
    |
244 | pub struct ObservableFactory {
    |            ----------------- field in this struct
245 |     /// Next observable ID
246 |     next_id: u64,
    |     ^^^^^^^
    |
    = note: `ObservableFactory` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `property_type` is never read
  --> seen_reactive/src/properties.rs:71:5
   |
57 | pub struct ComputedProperty {
   |            ---------------- field in this struct
...
71 |     property_type: Type,
   |     ^^^^^^^^^^^^^
   |
   = note: `ComputedProperty` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `next_property_id` and `next_observer_id` are never read
   --> seen_reactive/src/properties.rs:197:5
    |
189 | pub struct ReactivePropertyManager {
    |            ----------------------- fields in this struct
...
197 |     next_property_id: u64,
    |     ^^^^^^^^^^^^^^^^
198 |     /// Next available observer ID
199 |     next_observer_id: u64,
    |     ^^^^^^^^^^^^^^^^
    |
    = note: `ReactivePropertyManager` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `next_id` is never read
   --> seen_reactive/src/flow.rs:151:5
    |
149 | pub struct FlowFactory {
    |            ----------- field in this struct
150 |     /// Next flow ID
151 |     next_id: FlowId,
    |     ^^^^^^^
    |
    = note: `FlowFactory` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: `seen_memory_manager` (lib) generated 6 warnings (run `cargo fix --lib -p seen_memory_manager` to apply 3 suggestions)
warning: `seen_reactive` (lib) generated 18 warnings (run `cargo fix --lib -p seen_reactive` to apply 12 suggestions)
warning: unused imports: `Deserialize` and `Serialize`
 --> seen_interpreter/src/value.rs:5:13
  |
5 | use serde::{Serialize, Deserialize};
  |             ^^^^^^^^^  ^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Flow`, `Observable`, and `ReactiveProperty`
 --> seen_interpreter/src/value.rs:8:21
  |
8 | use seen_reactive::{Observable, Flow, ReactiveProperty};
  |                     ^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^^^^

warning: unused imports: `ActorRef`, `Promise`, and `TaskId`
 --> seen_interpreter/src/interpreter.rs:7:13
  |
7 |     types::{Promise, TaskPriority, AsyncValue, TaskId, ActorRef, AsyncError, AsyncResult},
  |             ^^^^^^^                            ^^^^^^  ^^^^^^^^

warning: unused imports: `Flow`, `Observable`, `ReactiveProperty`, and `properties::PropertyId`
  --> seen_interpreter/src/interpreter.rs:18:5
   |
18 |     Observable, Flow, ReactiveProperty,
   |     ^^^^^^^^^^  ^^^^  ^^^^^^^^^^^^^^^^
19 |     properties::PropertyId,
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:474:13
    |
130 |             Expression::FloatLiteral { value, .. } => Ok(Value::Float(*value)),
    |             -------------------------------------- matches all the relevant values
...
474 |             Expression::FloatLiteral { value, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |
    = note: `#[warn(unreachable_patterns)]` on by default

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:478:13
    |
385 |             Expression::InterpolatedString { parts, .. } => {
    |             -------------------------------------------- matches all the relevant values
...
478 |             Expression::InterpolatedString { parts, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:492:13
    |
153 |             Expression::UnaryOp { op, operand, pos } => {
    |             ---------------------------------------- matches all the relevant values
...
492 |             Expression::UnaryOp { op, operand, pos } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:504:13
    |
389 |             Expression::Elvis { nullable, default, .. } => {
    |             ------------------------------------------- matches all the relevant values
...
504 |             Expression::Elvis { nullable, default, pos } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:513:13
    |
305 |             Expression::IndexAccess { object, index, pos } => {
    |             ---------------------------------------------- matches all the relevant values
...
513 |             Expression::IndexAccess { object, index, pos, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> seen_interpreter/src/interpreter.rs:535:13
    |
286 |             Expression::Lambda { params, body, .. } => {
    |             --------------------------------------- matches all the relevant values
...
535 |             Expression::Lambda { params, body, .. } => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: value assigned to `last_value` is never read
   --> seen_interpreter/src/interpreter.rs:201:25
    |
201 |                 let mut last_value = Value::Unit;
    |                         ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `pos`
   --> seen_interpreter/src/interpreter.rs:433:56
    |
433 |             Expression::Receive { pattern: _, handler, pos } => {
    |                                                        ^^^ help: try ignoring the field: `pos: _`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `pos`
   --> seen_interpreter/src/interpreter.rs:504:52
    |
504 |             Expression::Elvis { nullable, default, pos } => {
    |                                                    ^^^ help: try ignoring the field: `pos: _`

warning: unused variable: `pos`
   --> seen_interpreter/src/interpreter.rs:546:61
    |
546 |             Expression::Try { body, catch_clauses, finally, pos, .. } => {
    |                                                             ^^^-
    |                                                             |
    |                                                             help: try removing the field

warning: unused variable: `promise`
   --> seen_interpreter/src/interpreter.rs:904:28
    |
904 |             Value::Promise(promise) => {
    |                            ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_promise`

warning: unused variable: `task_id`
   --> seen_interpreter/src/interpreter.rs:919:25
    |
919 |             Value::Task(task_id) => {
    |                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_task_id`

warning: unused variable: `actor_system`
    --> seen_interpreter/src/interpreter.rs:1076:13
     |
1076 |         let actor_system = self.runtime.actor_system();
     |             ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_actor_system`

warning: unused variable: `pos`
    --> seen_interpreter/src/interpreter.rs:1071:104
     |
1071 | ...ring, seen_parser::ast::Type)], pos: Position) -> InterpreterResult<Value> {
     |                                    ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `advanced_runtime`
    --> seen_interpreter/src/interpreter.rs:1201:13
     |
1201 |         let advanced_runtime = self.runtime.advanced_runtime();
     |             ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_advanced_runtime`

warning: unused variable: `effect_handle`
    --> seen_interpreter/src/interpreter.rs:1227:13
     |
1227 |         let effect_handle = Value::EffectHandle {
     |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_effect_handle`

warning: unused variable: `effect`
    --> seen_interpreter/src/interpreter.rs:1208:55
     |
1208 |     fn interpret_handle(&mut self, body: &Expression, effect: &str, handlers: &[seen_parser::ast::EffectHandler], pos: Position) -> Inter...
     |                                                       ^^^^^^ help: if this is intentional, prefix it with an underscore: `_effect`

warning: unused variable: `pos`
    --> seen_interpreter/src/interpreter.rs:1208:115
     |
1208 | ...en_parser::ast::EffectHandler], pos: Position) -> InterpreterResult<Value> {
     |                                    ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `pos`
    --> seen_interpreter/src/interpreter.rs:1328:62
     |
1328 |     fn interpret_flow_creation(&mut self, body: &Expression, pos: Position) -> InterpreterResult<Value> {
     |                                                              ^^^ help: if this is intentional, prefix it with an underscore: `_pos`

warning: unused variable: `obs`
    --> seen_interpreter/src/interpreter.rs:1395:31
     |
1395 |             Value::Observable(obs) => {
     |                               ^^^ help: if this is intentional, prefix it with an underscore: `_obs`

warning: field `is_function_scope` is never read
  --> seen_interpreter/src/runtime.rs:41:5
   |
38 | pub struct Environment {
   |            ----------- field in this struct
...
41 |     is_function_scope: bool,
   |     ^^^^^^^^^^^^^^^^^
   |
   = note: `Environment` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `task_counter` is never read
  --> seen_interpreter/src/interpreter.rs:84:5
   |
72 | pub struct Interpreter {
   |            ----------- field in this struct
...
84 |     task_counter: std::sync::atomic::AtomicU64,
   |     ^^^^^^^^^^^^

warning: `seen_interpreter` (lib) generated 26 warnings (run `cargo fix --lib -p seen_interpreter` to apply 5 suggestions)
warning: unused variable: `uri`
  --> seen_lsp/src/lib.rs:75:38
   |
75 |     async fn analyze_document(&self, uri: &Url, content: &str) -> Vec<Diagnostic> {
   |                                      ^^^ help: if this is intentional, prefix it with an underscore: `_uri`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `language`
  --> seen_lsp/src/lib.rs:79:13
   |
79 |         let language = self.language_config.read().await.clone();
   |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_language`

warning: variable does not need to be mutable
  --> seen_lsp/src/lib.rs:83:13
   |
83 |         let mut lexer = Lexer::new(content.to_string(), keyword_manager);
   |             ----^^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: use of deprecated field `tower_lsp::lsp_types::SymbolInformation::deprecated`: Use tags instead
   --> seen_lsp/src/lib.rs:997:21
    |
997 |                     deprecated: None,
    |                     ^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: variable does not need to be mutable
   --> seen_lsp/src/lib.rs:707:13
    |
707 |         let mut lexer = Lexer::new(content.clone(), keyword_manager);
    |             ----^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> seen_lsp/src/lib.rs:750:17
    |
750 |             let mut lexer = Lexer::new(content.clone(), keyword_manager);
    |                 ----^^^^^
    |                 |
    |                 help: remove this `mut`

warning: field `references` is never read
  --> seen_lsp/src/lib.rs:31:5
   |
23 | struct SymbolInfo {
   |        ---------- field in this struct
...
31 |     references: Vec<Location>,
   |     ^^^^^^^^^^
   |
   = note: `SymbolInfo` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `type_info` is never read
  --> seen_lsp/src/lib.rs:44:5
   |
36 | struct DocumentInfo {
   |        ------------ field in this struct
...
44 |     type_info: Option<TypeCheckResult>,
   |     ^^^^^^^^^
   |
   = note: `DocumentInfo` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `global_symbols` is never read
  --> seen_lsp/src/lib.rs:60:5
   |
52 | pub struct SeenLanguageServer {
   |            ------------------ field in this struct
...
60 |     global_symbols: Arc<RwLock<HashMap<String, Vec<SymbolInfo>>>>,
   |     ^^^^^^^^^^^^^^

warning: `seen_lsp` (lib) generated 9 warnings (run `cargo fix --lib -p seen_lsp` to apply 3 suggestions)
warning: unused variable: `program`
   --> seen_cli/src/main.rs:962:75
    |
962 | fn run_single_test(interpreter: &mut Interpreter, test_func: &Expression, program: &Program) -> Result<()> {
    |                                                                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_program`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: `seen_cli` (bin "seen_cli") generated 1 warning
    Finished `release` profile [optimized] target(s) in 3.20s
     Running `target/release/seen_cli build compiler_seen/src/main_compiler.seen -o stage1_compiler.c`
Compiling compiler_seen/src/main_compiler.seen with optimization level 0
Error: Failed to parse source

Caused by:
    Unexpected token: found EOF, expected end of expression
[0;31m❌ STAGE 1 FAILED: No C code generated[0m
