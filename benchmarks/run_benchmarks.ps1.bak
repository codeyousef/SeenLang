# PowerShell script for running Seen benchmark suite on Windows
# Equivalent to run_benchmarks.sh for Windows systems

param(
    [string]$Mode = "jit",
    [int]$Iterations = 100,
    [string]$Category = "",
    [switch]$Validate,
    [string]$Compare = "",
    [switch]$Help
)

# Color functions for output
function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

# Show help
if ($Help) {
    Write-Host @"
Usage: .\run_benchmarks.ps1 [OPTIONS]

Options:
  -Mode [jit|aot]       Execution mode (default: jit)
  -Iterations N         Number of iterations (default: 100)  
  -Category NAME        Run specific category only
  -Validate            Validate performance claims
  -Compare BASELINE    Compare against baseline file
  -Help                Show this help message

Examples:
  .\run_benchmarks.ps1
  .\run_benchmarks.ps1 -Mode aot -Iterations 500
  .\run_benchmarks.ps1 -Category microbenchmarks -Validate
  .\run_benchmarks.ps1 -Compare baseline.json
"@
    exit 0
}

# Setup paths
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$ProjectRoot = Split-Path -Parent $ScriptDir
$ResultsDir = Join-Path $ScriptDir "results"
$ReportsDir = Join-Path $ScriptDir "reports"

# Create directories if they don't exist
if (!(Test-Path $ResultsDir)) {
    New-Item -ItemType Directory -Path $ResultsDir | Out-Null
}
if (!(Test-Path $ReportsDir)) {
    New-Item -ItemType Directory -Path $ReportsDir | Out-Null
}

Write-Host "=== Seen Language Performance Benchmark Suite ===" -ForegroundColor Cyan
Write-Host "Mode: $Mode" -ForegroundColor Green
Write-Host "Iterations: $Iterations" -ForegroundColor Green
Write-Host ""

# Function to check if a command exists
function Test-Command($Command) {
    try {
        Get-Command $Command -ErrorAction Stop | Out-Null
        return $true
    } catch {
        return $false
    }
}

# Function to run benchmark category
function Run-BenchmarkCategory {
    param(
        [string]$CategoryName,
        [string]$SeenBinary
    )
    
    Write-Host "Running $CategoryName benchmarks..." -ForegroundColor Yellow
    
    $OutputFile = Join-Path $ResultsDir "${CategoryName}_${Mode}.json"
    
    switch ($CategoryName) {
        "microbenchmarks" {
            # Arithmetic operations
            & $SeenBinary run (Join-Path $ScriptDir "microbenchmarks\arithmetic_ops.seen") `
                --mode $Mode `
                --iterations $Iterations `
                --output $OutputFile
            
            # Memory operations
            & $SeenBinary run (Join-Path $ScriptDir "microbenchmarks\memory_ops.seen") `
                --mode $Mode `
                --iterations $Iterations `
                --append $OutputFile
            
            # String operations
            & $SeenBinary run (Join-Path $ScriptDir "microbenchmarks\string_ops.seen") `
                --mode $Mode `
                --iterations $Iterations `
                --append $OutputFile
        }
        
        "systems" {
            & $SeenBinary run (Join-Path $ScriptDir "systems\threading_benchmarks.seen") `
                --mode $Mode `
                --iterations $Iterations `
                --output $OutputFile
        }
        
        "real_world" {
            # Web server
            & $SeenBinary run (Join-Path $ScriptDir "real_world\web_server.seen") `
                --mode $Mode `
                --iterations ([Math]::Max(1, $Iterations / 10)) `
                --output $OutputFile
            
            # JSON parser
            & $SeenBinary run (Join-Path $ScriptDir "real_world\json_parser.seen") `
                --mode $Mode `
                --iterations $Iterations `
                --append $OutputFile
        }
        
        default {
            Write-Host "Unknown category: $CategoryName" -ForegroundColor Red
            return
        }
    }
    
    Write-Host "✓ $CategoryName benchmarks completed" -ForegroundColor Green
}

# Check for Seen compiler
Write-Host "Checking for Seen compiler..." -ForegroundColor Cyan
$SeenExe = Join-Path $ProjectRoot "target\release\seen.exe"
$SeenExeDebug = Join-Path $ProjectRoot "target\debug\seen.exe"

if (!(Test-Path $SeenExe)) {
    if (Test-Path $SeenExeDebug) {
        Write-Host "Using debug build of Seen compiler" -ForegroundColor Yellow
        $SeenExe = $SeenExeDebug
    } else {
        Write-Host "Seen compiler not found. Building..." -ForegroundColor Yellow
        
        Push-Location $ProjectRoot
        if (Test-Command "cargo") {
            cargo build --release --bin seen
            if ($LASTEXITCODE -ne 0) {
                Write-Host "Failed to build Seen compiler" -ForegroundColor Red
                Pop-Location
                exit 1
            }
        } else {
            Write-Host "Cargo not found. Please install Rust." -ForegroundColor Red
            Pop-Location
            exit 1
        }
        Pop-Location
    }
}

Write-Host "Using Seen compiler: $SeenExe" -ForegroundColor Green
Write-Host ""

# Build competitor benchmarks
Write-Host "Building competitor benchmarks..." -ForegroundColor Cyan

# Rust benchmarks
if (Test-Command "cargo") {
    Write-Host "Building Rust benchmarks..."
    Push-Location (Join-Path $ScriptDir "competitors\rust")
    cargo build --release --quiet 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "✓ Rust benchmarks built" -ForegroundColor Green
    } else {
        Write-Host "⚠ Failed to build Rust benchmarks" -ForegroundColor Yellow
    }
    Pop-Location
} else {
    Write-Host "⚠ Rust not found, skipping Rust benchmarks" -ForegroundColor Yellow
}

# C++ benchmarks
$CppCompiler = $null
if (Test-Command "cl") {
    $CppCompiler = "cl"
    Write-Host "Found MSVC compiler"
} elseif (Test-Command "g++") {
    $CppCompiler = "g++"
    Write-Host "Found g++ compiler"
} elseif (Test-Command "clang++") {
    $CppCompiler = "clang++"
    Write-Host "Found clang++ compiler"
}

if ($CppCompiler) {
    Write-Host "Building C++ benchmarks with $CppCompiler..."
    $CppSource = Join-Path $ScriptDir "competitors\cpp\arithmetic_bench.cpp"
    $CppOutput = Join-Path $ScriptDir "competitors\cpp\arithmetic_bench.exe"
    
    if ($CppCompiler -eq "cl") {
        # MSVC
        & cl /O2 /EHsc /std:c++20 /Fe:$CppOutput $CppSource 2>$null
    } else {
        # GCC or Clang
        & $CppCompiler -O3 -std=c++20 -o $CppOutput $CppSource 2>$null
    }
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "✓ C++ benchmarks built" -ForegroundColor Green
    } else {
        Write-Host "⚠ Failed to build C++ benchmarks" -ForegroundColor Yellow
    }
} else {
    Write-Host "⚠ No C++ compiler found, skipping C++ benchmarks" -ForegroundColor Yellow
}

# Zig benchmarks
if (Test-Command "zig") {
    Write-Host "Building Zig benchmarks..."
    Push-Location (Join-Path $ScriptDir "competitors\zig")
    zig build-exe arithmetic_bench.zig -O ReleaseFast 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "✓ Zig benchmarks built" -ForegroundColor Green
    } else {
        Write-Host "⚠ Failed to build Zig benchmarks" -ForegroundColor Yellow
    }
    Pop-Location
} else {
    Write-Host "⚠ Zig not found, skipping Zig benchmarks" -ForegroundColor Yellow
}

Write-Host ""

# Run benchmarks
if ($Category) {
    # Run specific category
    Run-BenchmarkCategory -CategoryName $Category -SeenBinary $SeenExe
} else {
    # Run all categories
    foreach ($cat in @("microbenchmarks", "systems", "real_world")) {
        Run-BenchmarkCategory -CategoryName $cat -SeenBinary $SeenExe
        Write-Host ""
    }
}

# Run competitor benchmarks
Write-Host "Running competitor benchmarks..." -ForegroundColor Cyan

$RustBench = Join-Path $ScriptDir "competitors\rust\target\release\arithmetic_bench.exe"
if (Test-Path $RustBench) {
    Write-Host "Running Rust benchmarks..."
    & $RustBench > (Join-Path $ResultsDir "rust_results.txt")
    Write-Host "✓ Rust benchmarks completed" -ForegroundColor Green
}

$CppBench = Join-Path $ScriptDir "competitors\cpp\arithmetic_bench.exe"
if (Test-Path $CppBench) {
    Write-Host "Running C++ benchmarks..."
    & $CppBench > (Join-Path $ResultsDir "cpp_results.txt")
    Write-Host "✓ C++ benchmarks completed" -ForegroundColor Green
}

$ZigBench = Join-Path $ScriptDir "competitors\zig\arithmetic_bench.exe"
if (Test-Path $ZigBench) {
    Write-Host "Running Zig benchmarks..."
    & $ZigBench > (Join-Path $ResultsDir "zig_results.txt")
    Write-Host "✓ Zig benchmarks completed" -ForegroundColor Green
}

Write-Host ""

# Validate performance claims if requested
if ($Validate) {
    Write-Host "Validating performance claims..." -ForegroundColor Cyan
    $ValidationReport = Join-Path $ReportsDir "validation_report.json"
    
    & $SeenExe run (Join-Path $ScriptDir "harness\runner.seen") `
        --validate-claims `
        --input-dir $ResultsDir `
        --output $ValidationReport
    
    if (Select-String -Path $ValidationReport -Pattern '"validation_status": "validated"' -Quiet) {
        Write-Host "✓ Performance claims validated!" -ForegroundColor Green
    } else {
        Write-Host "⚠ Some performance claims could not be validated" -ForegroundColor Yellow
        Get-Content $ValidationReport
    }
}

# Compare with baseline if requested
if ($Compare) {
    Write-Host "Comparing with baseline..." -ForegroundColor Cyan
    $ComparisonReport = Join-Path $ReportsDir "comparison_report.json"
    $CurrentResults = Join-Path $ResultsDir "microbenchmarks_${Mode}.json"
    
    & $SeenExe run (Join-Path $ScriptDir "harness\runner.seen") `
        --compare $Compare $CurrentResults `
        --output $ComparisonReport
    
    if (Select-String -Path $ComparisonReport -Pattern '"regression_detected": true' -Quiet) {
        Write-Host "✗ Performance regression detected!" -ForegroundColor Red
        Get-Content $ComparisonReport
        exit 1
    } else {
        Write-Host "✓ No performance regressions detected" -ForegroundColor Green
    }
}

# Generate final report
Write-Host "Generating comprehensive report..." -ForegroundColor Cyan
& $SeenExe run (Join-Path $ScriptDir "harness\reporter.seen") `
    --input-dir $ResultsDir `
    --output-dir $ReportsDir `
    --formats "json,markdown,html"

Write-Host ""
Write-Host "=== Benchmark Suite Completed ===" -ForegroundColor Green
Write-Host "Results saved to: $ResultsDir" -ForegroundColor Cyan
Write-Host "Reports saved to: $ReportsDir" -ForegroundColor Cyan
Write-Host ""

# Display summary
$MarkdownReport = Join-Path $ReportsDir "benchmark_report.md"
if (Test-Path $MarkdownReport) {
    Write-Host "Executive Summary:" -ForegroundColor Cyan
    Get-Content $MarkdownReport -TotalCount 30
}

# Open HTML report if available
$HtmlReport = Join-Path $ReportsDir "benchmark_report.html"
if (Test-Path $HtmlReport) {
    $OpenReport = Read-Host "Open HTML report in browser? (Y/N)"
    if ($OpenReport -eq 'Y' -or $OpenReport -eq 'y') {
        Start-Process $HtmlReport
    }
}