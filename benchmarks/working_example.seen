// Working example benchmark in Seen
// This demonstrates a simple benchmark that can actually run

fun main() {
    println("=== Seen Benchmark Example ===")
    
    // Get command line arguments
    let args = std::env::args()
    let mode = if args.len() > 1 { args[1] } else { "jit" }
    let iterations = if args.len() > 2 { args[2].parse_i32() } else { 1000 }
    
    println("Mode: " + mode)
    println("Iterations: " + iterations.to_string())
    
    // Simple arithmetic benchmark
    let start = std::time::now()
    let mut sum = 0
    
    for i in 0..iterations {
        sum = sum + i * 2
        sum = sum - i / 2
        sum = sum ^ (i & 0xFF)
    }
    
    let elapsed = std::time::now() - start
    let ops_per_sec = (iterations as f64) / elapsed.as_secs_f64()
    
    println("Results:")
    println("  Final sum: " + sum.to_string())
    println("  Time: " + elapsed.as_millis().to_string() + "ms")
    println("  Ops/sec: " + ops_per_sec.to_string())
    
    // Output JSON result if requested
    if args.len() > 3 {
        let output_file = args[3]
        let json = "{
  \"benchmark\": \"simple_arithmetic\",
  \"mode\": \"" + mode + "\",
  \"iterations\": " + iterations.to_string() + ",
  \"time_ms\": " + elapsed.as_millis().to_string() + ",
  \"ops_per_sec\": " + ops_per_sec.to_string() + "
}"
        std::fs::write_string(output_file, json)
        println("Results saved to: " + output_file)
    }
}