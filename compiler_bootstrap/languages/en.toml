# English language configuration for the Seen programming language
# This file defines the English keywords and operators used in Seen source code

name = "English"
description = "English keyword set for the Seen programming language"

[keywords]
# Control flow  
"fun" = "KeywordFun"
"func" = "KeywordFun"
"if" = "KeywordIf"
"else" = "KeywordElse"
"while" = "KeywordWhile"
"for" = "KeywordFor"
"in" = "KeywordIn"
"match" = "KeywordMatch"
"when" = "KeywordWhen"
"break" = "KeywordBreak"
"continue" = "KeywordContinue"
"return" = "KeywordReturn"

# Variable declarations
"let" = "KeywordLet"
"var" = "KeywordVar"
"const" = "KeywordConst"
"static" = "KeywordStatic"

# Type definitions
"struct" = "KeywordStruct"
"class" = "KeywordClass"
"data" = "KeywordData"
"enum" = "KeywordEnum"
"trait" = "KeywordTrait"
"impl" = "KeywordImpl"
"type" = "KeywordType"

# Module system
"module" = "KeywordModule"
"import" = "KeywordImport"
"use" = "KeywordUse"

# Literals and keywords
"true" = "KeywordTrue"
"false" = "KeywordFalse"
"null" = "KeywordNull"
"is" = "KeywordIs"

# Kotlin coroutines
"suspend" = "KeywordSuspend"
"await" = "KeywordAwait"
"launch" = "KeywordLaunch"

# Additional Kotlin features
"sealed" = "KeywordSealed"
"companion" = "KeywordCompanion"
"object" = "KeywordObject"
"interface" = "KeywordInterface"
"inline" = "KeywordInline"
"tailrec" = "KeywordTailrec"
"operator" = "KeywordOperator"

# Memory management (Vale-style)
"move" = "KeywordMove"
"borrow" = "KeywordBorrow"
"inout" = "KeywordInout"
"mut" = "KeywordMut"

# Logical operators (word-based)
"and" = "KeywordAnd"
"or" = "KeywordOr"
"not" = "KeywordNot"

[operators]
# Arithmetic operators
"+" = "Plus"
"-" = "Minus"
"*" = "Multiply"
"/" = "Divide"
"%" = "Modulo"

# Assignment operators
"=" = "Assign"
"+=" = "PlusAssign"
"-=" = "MinusAssign"
"*=" = "MultiplyAssign"
"/=" = "DivideAssign"
"%=" = "ModuloAssign"

# Comparison operators
"==" = "Equal"
"!=" = "NotEqual"
"<" = "Less"
"<=" = "LessEqual"
">" = "Greater"
">=" = "GreaterEqual"

# NO symbolic logical operators - word-based only per Syntax Design

# Bitwise operators
"&" = "BitwiseAnd"
"|" = "BitwiseOr"
"^" = "BitwiseXor"
"~" = "BitwiseNot"
"<<" = "LeftShift"
">>" = "RightShift"

# Special operators
"->" = "Arrow"
"=>" = "FatArrow"
"?" = "Question"
"." = "Dot"
".." = "DotDot"
"..." = "TripleDot"
"::" = "DoubleColon"
"?." = "QuestionDot"      # Safe call operator
"?:" = "Elvis"            # Elvis operator
"!!" = "BangBang"         # Not-null assertion
"..<" = "DotDotLess"      # Exclusive range

# Delimiters
"(" = "LeftParen"
")" = "RightParen"
"{" = "LeftBrace"
"}" = "RightBrace"
"[" = "LeftBracket"
"]" = "RightBracket"

# Punctuation
"," = "Comma"
";" = "Semicolon"
":" = "Colon"
"@" = "At"
"_" = "Underscore"