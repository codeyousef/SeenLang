// Performance Benchmark: Phase 2 features vs Phase 1 baseline

// Phase 1 baseline: Simple recursive function
func factorial_simple(n: Int) -> Int {
    if n <= 1 {
        return 1
    } else {
        return n * factorial_simple(n - 1)
    }
}

// Phase 2: Using Result<T,E> for error handling
func factorial_safe(n: Int) -> Result<Int, String> {
    if n < 0 {
        return Result<Int, String>.Err("Negative input")
    }
    
    if n <= 1 {
        return Result<Int, String>.Ok(1)
    } else {
        val prev_result = factorial_safe(n - 1)?  // Use ? operator
        return Result<Int, String>.Ok(n * prev_result)
    }
}

// Phase 2: Using Option<T> for nullable values
func safe_get(arr: [Int], index: Int) -> Option<Int> {
    if index >= 0 && index < 10 {  // Assuming fixed array size for now
        return Option<Int>.Some(arr[index])
    } else {
        return Option<Int>.None
    }
}

// Phase 2: Using enums for state machine
enum ProcessState {
    Initial,
    Processing(Int),
    Complete(Int),
    Error(String)
}

func process_value(state: ProcessState, input: Int) -> ProcessState {
    match state {
        ProcessState.Initial => {
            if input > 0 {
                return ProcessState.Processing(input)
            } else {
                return ProcessState.Error("Invalid input")
            }
        }
        ProcessState.Processing(current) => {
            val result = current + input
            if result > 100 {
                return ProcessState.Complete(result)
            } else {
                return ProcessState.Processing(result)
            }
        }
        ProcessState.Complete(value) => {
            return ProcessState.Complete(value)  // Already complete
        }
        ProcessState.Error(msg) => {
            return ProcessState.Error(msg)       // Stay in error state
        }
    }
}

// Benchmark function using stdlib math functions
func math_intensive_task(iterations: Int) -> Int {
    val mut result = 0
    val mut i = 0
    
    while i < iterations {
        val abs_val = abs_int(i - 50)
        val min_val = min_int(abs_val, 25)
        val max_val = max_int(min_val, 5)
        result = result + max_val
        i = i + 1
    }
    
    return result
}

func main() -> Int {
    println("=== Performance Benchmark: Phase 2 vs Phase 1 ===")
    
    // Baseline Phase 1 test
    val simple_factorial = factorial_simple(5)
    println("Simple factorial(5): ", simple_factorial)
    
    // Phase 2 Result<T,E> test
    val safe_factorial_result = factorial_safe(5)
    
    val safe_factorial = match safe_factorial_result {
        Result<Int, String>.Ok(value) => value
        Result<Int, String>.Err(msg) => -1
    }
    println("Safe factorial(5): ", safe_factorial)
    
    // Phase 2 Option<T> test
    val test_array = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
    val opt_value = safe_get(test_array, 3)
    
    val retrieved_value = match opt_value {
        Option<Int>.Some(val) => val
        Option<Int>.None => -1
    }
    println("Safe array access[3]: ", retrieved_value)
    
    // Phase 2 enum state machine test
    val mut state = ProcessState.Initial
    state = process_value(state, 30)
    state = process_value(state, 40)
    state = process_value(state, 50)  // Should reach Complete(120)
    
    val final_state_value = match state {
        ProcessState.Complete(value) => value
        ProcessState.Processing(value) => value
        ProcessState.Initial => 0
        ProcessState.Error(msg) => -1
    }
    println("State machine final value: ", final_state_value)
    
    // Performance test with stdlib functions
    val math_result = math_intensive_task(100)
    println("Math intensive result: ", math_result)
    
    // Calculate total benchmark score
    val total_score = simple_factorial + safe_factorial + retrieved_value + final_state_value + math_result
    println("Total benchmark score: ", total_score)
    
    return total_score
}