// Simple Test Runner - Bootstrap Compatible
// A minimal test runner that can actually execute

fun main() -> Int {
    println("🧪 SEEN COMPILER TEST EXECUTION");
    println("================================");
    
    let totalTests = 0;
    let passedTests = 0;
    let failedTests = 0;
    
    // Test 1: Basic Print
    println("\n[TEST 1] Basic Print Test");
    totalTests = totalTests + 1;
    if testBasicPrint() {
        println("  ✅ PASSED");
        passedTests = passedTests + 1;
    } else {
        println("  ❌ FAILED");
        failedTests = failedTests + 1;
    }
    
    // Test 2: Variables
    println("\n[TEST 2] Variable Test");
    totalTests = totalTests + 1;
    if testVariables() {
        println("  ✅ PASSED");
        passedTests = passedTests + 1;
    } else {
        println("  ❌ FAILED");
        failedTests = failedTests + 1;
    }
    
    // Test 3: Functions
    println("\n[TEST 3] Function Test");
    totalTests = totalTests + 1;
    if testFunctions() {
        println("  ✅ PASSED");
        passedTests = passedTests + 1;
    } else {
        println("  ❌ FAILED");
        failedTests = failedTests + 1;
    }
    
    // Test 4: Conditionals
    println("\n[TEST 4] Conditional Test");
    totalTests = totalTests + 1;
    if testConditionals() {
        println("  ✅ PASSED");
        passedTests = passedTests + 1;
    } else {
        println("  ❌ FAILED");
        failedTests = failedTests + 1;
    }
    
    // Test 5: Loops
    println("\n[TEST 5] Loop Test");
    totalTests = totalTests + 1;
    if testLoops() {
        println("  ✅ PASSED");
        passedTests = passedTests + 1;
    } else {
        println("  ❌ FAILED");
        failedTests = failedTests + 1;
    }
    
    // Test 6: Word Operators
    println("\n[TEST 6] Word Operators Test");
    totalTests = totalTests + 1;
    if testWordOperators() {
        println("  ✅ PASSED");
        passedTests = passedTests + 1;
    } else {
        println("  ❌ FAILED");
        failedTests = failedTests + 1;
    }
    
    // Test 7: String Interpolation
    println("\n[TEST 7] String Interpolation Test");
    totalTests = totalTests + 1;
    if testStringInterpolation() {
        println("  ✅ PASSED");
        passedTests = passedTests + 1;
    } else {
        println("  ❌ FAILED");
        failedTests = failedTests + 1;
    }
    
    // Test 8: Arrays
    println("\n[TEST 8] Array Test");
    totalTests = totalTests + 1;
    if testArrays() {
        println("  ✅ PASSED");
        passedTests = passedTests + 1;
    } else {
        println("  ❌ FAILED");
        failedTests = failedTests + 1;
    }
    
    // Test 9: Classes
    println("\n[TEST 9] Class Test");
    totalTests = totalTests + 1;
    if testClasses() {
        println("  ✅ PASSED");
        passedTests = passedTests + 1;
    } else {
        println("  ❌ FAILED");
        failedTests = failedTests + 1;
    }
    
    // Test 10: Nullable Types
    println("\n[TEST 10] Nullable Types Test");
    totalTests = totalTests + 1;
    if testNullableTypes() {
        println("  ✅ PASSED");
        passedTests = passedTests + 1;
    } else {
        println("  ❌ FAILED");
        failedTests = failedTests + 1;
    }
    
    // Print Summary
    println("\n================================");
    println("📊 TEST SUMMARY");
    println("Total Tests: " + totalTests);
    println("Passed:      " + passedTests + " ✅");
    println("Failed:      " + failedTests + " ❌");
    
    if failedTests == 0 {
        println("\n🎉 ALL TESTS PASSED!");
        return 0;
    } else {
        println("\n❌ SOME TESTS FAILED");
        return 1;
    }
}

// Test Functions

fun testBasicPrint() -> Bool {
    println("  Testing: println function");
    println("  Hello from Seen!");
    return true;
}

fun testVariables() -> Bool {
    println("  Testing: let and var");
    let immutable = 42;
    var mutable = 100;
    mutable = 200;
    
    if mutable == 200 {
        println("  Variables work correctly");
        return true;
    }
    return false;
}

fun testFunctions() -> Bool {
    println("  Testing: function calls");
    let result = add(10, 20);
    
    if result == 30 {
        println("  Functions work correctly");
        return true;
    }
    return false;
}

fun add(a: Int, b: Int) -> Int {
    return a + b;
}

fun testConditionals() -> Bool {
    println("  Testing: if/else");
    let x = 10;
    
    if x > 5 {
        if x < 20 {
            println("  Conditionals work correctly");
            return true;
        }
    }
    return false;
}

fun testLoops() -> Bool {
    println("  Testing: for loops");
    let sum = 0;
    
    for i in 1..5 {
        sum = sum + i;
    }
    
    if sum == 15 {  // 1+2+3+4+5 = 15
        println("  Loops work correctly");
        return true;
    }
    return false;
}

fun testWordOperators() -> Bool {
    println("  Testing: and, or, not");
    let a = true;
    let b = false;
    
    if a and not b {
        if a or b {
            println("  Word operators work correctly");
            return true;
        }
    }
    return false;
}

fun testStringInterpolation() -> Bool {
    println("  Testing: string interpolation");
    let name = "Seen";
    let version = 2;
    
    let message = "Language: {name}, Version: {version}";
    println("  " + message);
    
    // Basic check - if we got here without crashing, it works
    return true;
}

fun testArrays() -> Bool {
    println("  Testing: arrays");
    let numbers = [1, 2, 3, 4, 5];
    
    if numbers[0] == 1 {
        if numbers[4] == 5 {
            println("  Arrays work correctly");
            return true;
        }
    }
    return false;
}

fun testClasses() -> Bool {
    println("  Testing: classes");
    let point = Point{ x: 10, y: 20 };
    
    if point.x == 10 {
        if point.y == 20 {
            println("  Classes work correctly");
            return true;
        }
    }
    return false;
}

class Point {
    var x: Int;
    var y: Int;
}

fun testNullableTypes() -> Bool {
    println("  Testing: nullable types");
    let maybe: Int? = null;
    let definitely: Int? = 42;
    
    // Elvis operator
    let value1 = maybe ?: 0;
    let value2 = definitely ?: 0;
    
    if value1 == 0 {
        if value2 == 42 {
            println("  Nullable types work correctly");
            return true;
        }
    }
    return false;
}