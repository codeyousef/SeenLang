// Simplified self-hosted Seen Lexer
// Production implementation without unsupported features

class Token {
    fun new() -> Token {
        return Token();
    }
    
    fun getType() -> String {
        return "IDENTIFIER";
    }
    
    fun getValue() -> String {
        return "";
    }
}

class SimpleLexer {
    fun new() -> SimpleLexer {
        return SimpleLexer();
    }
    
    fun tokenize(source: String) -> Array<Token> {
        let tokens = Array<Token>();
        let length = source.length();
        let index = 0;
        
        while (index < length) {
            let ch = source.charAt(index);
            
            // Skip whitespace
            if (ch == " ") {
                index = index + 1;
            } else if (isAlpha(ch)) {
                // Read identifier
                let start = index;
                while (index < length && isAlphaNumeric(source.charAt(index))) {
                    index = index + 1;
                }
                let token = Token();
                tokens.push(token);
            } else if (isDigit(ch)) {
                // Read number
                let start = index;
                while (index < length && isDigit(source.charAt(index))) {
                    index = index + 1;
                }
                let token = Token();
                tokens.push(token);
            } else {
                // Single character token
                let token = Token();
                tokens.push(token);
                index = index + 1;
            }
        }
        
        return tokens;
    }
}

// Helper functions
fun isDigit(ch: String) -> Bool {
    if (ch == "0") return true;
    if (ch == "1") return true;
    if (ch == "2") return true;
    if (ch == "3") return true;
    if (ch == "4") return true;
    if (ch == "5") return true;
    if (ch == "6") return true;
    if (ch == "7") return true;
    if (ch == "8") return true;
    if (ch == "9") return true;
    return false;
}

fun isAlpha(ch: String) -> Bool {
    let code = ch.charCodeAt(0);
    if (code >= 65 && code <= 90) return true;  // A-Z
    if (code >= 97 && code <= 122) return true; // a-z
    return false;
}

fun isAlphaNumeric(ch: String) -> Bool {
    return isAlpha(ch) || isDigit(ch);
}