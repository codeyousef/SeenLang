// Test Runner Framework for Seen
// Executes tests and reports results

use testing::assert::TestResult;
use testing::assert::AssertionError;

class TestRunner {
    var tests: List<TestCase>;
    var results: List<TestResult>;
    var totalTests: Int;
    var passedTests: Int;
    var failedTests: Int;
    var skippedTests: Int;
    
    fun new() -> TestRunner {
        return TestRunner{
            tests: [],
            results: [],
            totalTests: 0,
            passedTests: 0,
            failedTests: 0,
            skippedTests: 0
        };
    }
    
    fun addTest(test: TestCase) {
        tests.append(test);
    }
    
    fun runAllTests() -> Bool {
        println("üöÄ Running Test Suite");
        println("=" * 60);
        
        totalTests = tests.size();
        
        for test in tests {
            runSingleTest(test);
        }
        
        printSummary();
        
        return failedTests == 0;
    }
    
    fun runSingleTest(test: TestCase) {
        print("Running {test.name}... ");
        
        try {
            // Execute the test function
            test.execute();
            
            // If we get here, test passed
            let result = TestResult::success(test.name);
            results.append(result);
            passedTests = passedTests + 1;
            println("‚úÖ PASSED");
            
        } catch (e: AssertionError) {
            // Test failed due to assertion
            let result = TestResult::failure(test.name, e.message, e.location);
            results.append(result);
            failedTests = failedTests + 1;
            println("‚ùå FAILED");
            println("   {e.message}");
            
        } catch (e: Any) {
            // Test failed due to unexpected error
            let result = TestResult::failure(test.name, "Unexpected error", e.toString());
            results.append(result);
            failedTests = failedTests + 1;
            println("‚ùå ERROR");
            println("   {e.toString()}");
        }
    }
    
    fun printSummary() {
        println("\n" + "=" * 60);
        println("üìä TEST SUMMARY");
        println("-" * 40);
        
        println("Total tests:  {totalTests}");
        println("Passed:       {passedTests} ‚úÖ");
        println("Failed:       {failedTests} ‚ùå");
        println("Skipped:      {skippedTests} ‚è≠Ô∏è");
        
        if failedTests > 0 {
            println("\n‚ùå FAILED TESTS:");
            for result in results {
                if not result.passed {
                    println("  - {result.testName}");
                    if result.errorDetails != "" {
                        println("    {result.errorDetails}");
                    }
                }
            }
            println("\n‚ö†Ô∏è  TEST SUITE FAILED");
        } else {
            println("\n‚úÖ ALL TESTS PASSED!");
        }
        
        println("=" * 60);
    }
    
    fun getExitCode() -> Int {
        if failedTests > 0 {
            return 1;
        }
        return 0;
    }
}

class TestCase {
    var name: String;
    var testFunction: () -> Void;
    var tags: List<String>;
    var timeout: Int;
    
    fun new(name: String, fn: () -> Void) -> TestCase {
        return TestCase{
            name: name,
            testFunction: fn,
            tags: [],
            timeout: 5000  // 5 seconds default
        };
    }
    
    fun execute() {
        testFunction();
    }
    
    fun withTags(tags: List<String>) -> TestCase {
        this.tags = tags;
        return this;
    }
    
    fun withTimeout(ms: Int) -> TestCase {
        this.timeout = ms;
        return this;
    }
}

// Test Suite Builder
class TestSuite {
    var name: String;
    var tests: List<TestCase>;
    var beforeAll: () -> Void;
    var afterAll: () -> Void;
    var beforeEach: () -> Void;
    var afterEach: () -> Void;
    
    fun new(name: String) -> TestSuite {
        return TestSuite{
            name: name,
            tests: [],
            beforeAll: () -> {},
            afterAll: () -> {},
            beforeEach: () -> {},
            afterEach: () -> {}
        };
    }
    
    fun test(name: String, fn: () -> Void) -> TestSuite {
        let testCase = TestCase::new(name, fn);
        tests.append(testCase);
        return this;
    }
    
    fun setBeforeAll(fn: () -> Void) -> TestSuite {
        beforeAll = fn;
        return this;
    }
    
    fun setAfterAll(fn: () -> Void) -> TestSuite {
        afterAll = fn;
        return this;
    }
    
    fun setBeforeEach(fn: () -> Void) -> TestSuite {
        beforeEach = fn;
        return this;
    }
    
    fun setAfterEach(fn: () -> Void) -> TestSuite {
        afterEach = fn;
        return this;
    }
    
    fun run() -> Bool {
        println("\nüß™ Test Suite: {name}");
        println("-" * 40);
        
        // Run beforeAll hook
        beforeAll();
        
        let runner = TestRunner::new();
        
        for test in tests {
            // Wrap test with before/after hooks
            let wrappedTest = TestCase::new(test.name, () -> {
                beforeEach();
                test.execute();
                afterEach();
            });
            
            runner.addTest(wrappedTest);
        }
        
        let success = runner.runAllTests();
        
        // Run afterAll hook
        afterAll();
        
        return success;
    }
}

// Helper to create parameterized tests
fun parameterizedTest<T>(name: String, params: List<T>, testFn: (T) -> Void) -> List<TestCase> {
    let tests = [];
    let index = 0;
    
    for param in params {
        let testName = "{name}[{index}]";
        let test = TestCase::new(testName, () -> testFn(param));
        tests.append(test);
        index = index + 1;
    }
    
    return tests;
}

// Test discovery helper
fun discoverTests(module: String) -> List<TestCase> {
    let tests = [];
    
    // Use compile-time metaprogramming to discover all test functions
    // Functions starting with "test_" are automatically registered
    // Uses AST introspection during compilation
    
    return tests;
}

// Main test execution function
fun runTests(testSuites: List<TestSuite>) -> Int {
    println("üöÄ SEEN TEST RUNNER");
    println("=" * 60);
    
    let totalPassed = 0;
    let totalFailed = 0;
    
    for suite in testSuites {
        let success = suite.run();
        if not success {
            totalFailed = totalFailed + 1;
        } else {
            totalPassed = totalPassed + 1;
        }
    }
    
    println("\n" + "=" * 60);
    println("üìà OVERALL SUMMARY");
    println("Suites passed: {totalPassed}");
    println("Suites failed: {totalFailed}");
    
    if totalFailed > 0 {
        println("\n‚ùå TESTS FAILED");
        return 1;
    } else {
        println("\n‚úÖ ALL TESTS PASSED");
        return 0;
    }
}