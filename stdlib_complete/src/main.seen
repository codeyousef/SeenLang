// Core functions that demonstrate Phase 1 completion

func abs(x: Int) -> Int {
    if x < 0 {
        return 0 - x;
    } else {
        return x;
    }
}

func factorial(n: Int) -> Int {
    if n <= 1 {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

func main() {
    // Test all core LLVM features working together
    
    // 1. Functions and recursion
    val fact5 = factorial(5);
    println(fact5);     // 120
    
    // 2. Negative numbers and abs
    val negative = 0 - 10;
    val positive = abs(negative);
    println(positive);  // 10
    
    // 3. Arrays with literals and indexing
    val numbers = [1, 2, 3, 4, 5];
    val first = numbers[0];
    val last = numbers[4];
    println(first);     // 1
    println(last);      // 5
    
    // 4. Arithmetic and operations
    val sum = first + last;
    val product = sum * 2;
    val modulo = product % 3;
    println(sum);       // 6
    println(product);   // 12  
    println(modulo);    // 0
}
