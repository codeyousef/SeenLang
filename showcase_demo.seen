// Seen Language Showcase - Demonstrating Self-Hosting Capability
// This program showcases the major features of the Seen programming language
// Compiled by the Seen compiler, written in Seen itself (self-hosting!)

// ===== BASIC FUNCTIONS AND VARIABLES =====
fun main() -> Int {
    println("ðŸŽ‰ Welcome to the Seen Programming Language!")
    println("This program was compiled by a compiler written in Seen itself.")
    
    // Demonstrate various language features
    demonstrateBasics()
    demonstrateStrings()
    demonstrateNullables()
    demonstratePatternMatching()
    demonstrateClasses()
    
    println("âœ… All Seen language features demonstrated successfully!")
    return 0
}

// ===== STRING INTERPOLATION =====
fun demonstrateStrings() {
    let name = "Seen"
    let version = "1.0"
    let message = "Hello from {name} language version {version}!"
    println(message)
    
    // Advanced string operations
    let result = concatenateStrings("Self-hosting", "Complete")
    println("Result: {result}")
}

fun concatenateStrings(first: String, second: String) -> String {
    return "{first} + {second} = Success"
}

// ===== NULLABLE TYPES AND SAFETY =====
fun demonstrateNullables() {
    let maybeValue: String? = findValue("test")
    
    // Safe navigation operator
    let length = maybeValue?.length() ?: 0
    println("Safe length: {length}")
    
    // Pattern matching with nullables
    match maybeValue {
        Some(value) -> println("Found value: {value}"),
        None -> println("No value found")
    }
}

fun findValue(key: String) -> String? {
    if key == "test" {
        return Some("Found test value!")
    } else {
        return None
    }
}

// ===== PATTERN MATCHING =====
fun demonstratePatternMatching() {
    let numbers = [1, 2, 3, 4, 5]
    
    for number in numbers {
        let description = match number {
            1 -> "first",
            2 -> "second", 
            3 -> "third",
            n if n > 10 -> "large number",
            _ -> "other number"
        }
        println("Number {number} is {description}")
    }
}

// ===== CLASSES AND METHODS =====
class Person {
    name: String
    age: Int
    
    fun new(name: String, age: Int) -> Person {
        return Person { name: name, age: age }
    }
    
    fun (p: Person) greet() -> String {
        return "Hello, I'm {p.name} and I'm {p.age} years old"
    }
    
    fun (p: Person) isAdult() -> Bool {
        return p.age >= 18
    }
}

fun demonstrateClasses() {
    let person = Person.new("Alice", 25)
    println(person.greet())
    
    if person.isAdult() {
        println("{person.name} is an adult")
    } else {
        println("{person.name} is a minor")
    }
}

// ===== BASIC DEMONSTRATIONS =====
fun demonstrateBasics() {
    // Variables and types
    let immutableValue = 42
    let mutableValue = 10
    mutableValue = mutableValue + 5
    
    // Word operators (unique to Seen!)
    let condition = true and false or not false
    
    if immutableValue > 40 and condition {
        println("Condition met with value: {immutableValue}")
    }
    
    // Arithmetic operations
    let result = calculateSum(immutableValue, mutableValue)
    println("Sum calculation: {result}")
}

fun calculateSum(a: Int, b: Int) -> Int {
    return a + b
}

// ===== UTILITY FUNCTIONS =====
fun println(message: String) {
    // Built-in function for output
    // This will be implemented by the runtime
}