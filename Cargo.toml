[workspace]
members = [
    "compiler_bootstrap/seen_common",     # Shared utilities and error types
    "compiler_bootstrap/seen_lexer",      # Lexical analysis (>10M tokens/sec)
    "compiler_bootstrap/seen_parser",     # Syntax analysis & AST (>1M lines/sec)
    "compiler_bootstrap/seen_typechecker", # Type system & inference (<100Î¼s/func)
    "compiler_bootstrap/seen_memory",     # Vale-style memory model (<5% overhead)
    "compiler_bootstrap/seen_ir",         # Intermediate representation & codegen
    "compiler_bootstrap/seen_interpreter", # AST interpreter for rapid development
    "compiler_bootstrap/seen_ffi",        # Foreign Function Interface for C interop
    "compiler_bootstrap/seen_process",    # Process management & self-hosting infrastructure
    "compiler_bootstrap/seen_cli",        # Command-line interface (build/run/check/clean/test/format)
    "seen_std",                           # Standard library
]

resolver = "2"

[workspace.dependencies]
# Core dependencies for language implementation
# Note: LLVM dependencies will be added in Step 6 (Basic Code Generation)
# For MVP Milestones 1-2, we focus on lexing, parsing, and type checking
toml = "0.8"                            # Configuration file parsing
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
bincode = "1.3"                         # Binary serialization
clap = { version = "4.5", features = ["derive", "cargo"] } # CLI argument parsing

# Error handling and utilities
thiserror = "2.0"                       # Error derive macros
anyhow = "1.0"                          # Error context handling
log = "0.4"                             # Logging framework
env_logger = "0.11"                     # Environment-based logger

# Performance and data structures
hashbrown = "0.15"                      # High-performance HashMap
smallvec = "1.13"                       # Stack-allocated vectors
bumpalo = "3.16"                        # Bump allocator for AST nodes
rayon = "1.10"                          # Data parallelism
crossbeam = "0.8"                       # Lock-free concurrency primitives

# String handling and regex
regex = "1.11"                          # Regular expressions
unicode-xid = "0.2"                     # Unicode identifier handling
memchr = "2.7"                          # Fast string searching

# File system and I/O
walkdir = "2.5"                         # Directory traversal
tempfile = "3.19"                       # Temporary file handling
memmap2 = "0.9"                         # Memory-mapped files

# Testing framework
criterion = { version = "0.6.0", features = ["html_reports"] } # Benchmarking
proptest = "1.5"                        # Property-based testing
pretty_assertions = "1.4"               # Better assertion output
test-case = "3.3"                       # Parameterized tests
rstest = "0.25.0"                       # Fixture-based tests
insta = { version = "1.41", features = ["yaml"] } # Snapshot testing

# Development tools
mockall = "0.13"                        # Mock generation (for testing only)

[profile.release]
lto = true                              # Enable Link Time Optimization
codegen-units = 1                       # Single codegen unit for max optimization
panic = "abort"                         # Abort on panic for smaller binaries
strip = true                            # Strip debug symbols
opt-level = 3                           # Maximum optimization

[profile.dev]
opt-level = 1                           # Light optimization for faster dev builds
debug = true                            # Full debug info for development
panic = "unwind"                        # Unwind panics for better debugging

[profile.test]
opt-level = 1                           # Some optimization for faster test execution
debug = 2                               # Full debug info for tests

[profile.bench]
opt-level = 3                           # Maximum optimization for benchmarks
lto = true                              # LTO for accurate benchmarks
codegen-units = 1                       # Single codegen unit for stable results
debug = false                           # No debug info for benchmarks

# Custom profiles for different compiler phases
[profile.compiler-fast]
inherits = "release"
debug = 1                               # Minimal debug info for compiler debugging
opt-level = 2                           # Balanced optimization for compiler development

[profile.self-hosting]
inherits = "release"
debug = 2                               # Full debug info for self-hosting transition
lto = "fat"                             # Aggressive LTO for self-hosted compiler