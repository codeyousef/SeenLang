name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check code formatting
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all -- --check

  # Lint code with clippy
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Run tests on multiple platforms
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Only test nightly on Linux to save CI time
          - os: windows-latest
            rust: nightly
          - os: macos-latest
            rust: nightly
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
      - name: Install LLVM (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-14 llvm-14-dev libclang-14-dev
      - name: Install LLVM (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm@14
          echo "LLVM_SYS_140_PREFIX=$(brew --prefix llvm@14)" >> $GITHUB_ENV
      - name: Install LLVM (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install llvm --version=14.0.6
          echo "LLVM_SYS_140_PREFIX=C:\Program Files\LLVM" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Run tests
        run: cargo test --all --verbose
        continue-on-error: ${{ matrix.rust == 'nightly' }}
      - name: Run ignored tests
        run: cargo test --all --verbose -- --ignored
        continue-on-error: true

  # Run benchmarks
  bench:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install LLVM
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-14 llvm-14-dev libclang-14-dev
      - name: Run benchmarks
        run: cargo bench --all

  # Check documentation
  doc:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Check documentation
        run: cargo doc --all --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: -D warnings

  # Code coverage with tarpaulin
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install LLVM
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-14 llvm-14-dev libclang-14-dev
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Run coverage
        run: cargo tarpaulin --all --out Xml --verbose
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./cobertura.xml
          fail_ci_if_error: false

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v1.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Check for unused dependencies
  dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-machete
        run: cargo install cargo-machete
      - name: Check for unused dependencies
        run: cargo machete

  # Build release binaries
  release-build:
    name: Release Build
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Install LLVM (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-14 llvm-14-dev libclang-14-dev
      - name: Install LLVM (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm@14
          echo "LLVM_SYS_140_PREFIX=$(brew --prefix llvm@14)" >> $GITHUB_ENV
      - name: Install LLVM (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install llvm --version=14.0.6
          echo "LLVM_SYS_140_PREFIX=C:\Program Files\LLVM" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: seen-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/seen${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  # Notify on failure
  notify:
    name: Notify on Failure
    needs: [fmt, clippy, test, bench, doc, coverage, security, dependencies]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Notify failure
        run: echo "One or more CI checks failed!"