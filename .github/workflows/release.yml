name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.1.0)'
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Seen Language ${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}
          body: |
            # Seen Language ${{ steps.get_version.outputs.version }}
            
            ## What's Changed
            
            <!-- Add release notes here -->
            
            ## Installation
            
            ### From Source
            ```bash
            cargo install seen_cli
            ```
            
            ### Pre-built Binaries
            Download the appropriate binary for your platform from the assets below.
            
            ## Checksums
            
            <!-- Checksums will be added automatically -->

  # Build and upload release assets
  build-release:
    name: Build Release (${{ matrix.target }})
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: seen
            asset_name: seen-linux-amd64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: seen.exe
            asset_name: seen-windows-amd64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: seen
            asset_name: seen-macos-amd64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: seen
            asset_name: seen-macos-arm64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: seen
            asset_name: seen-linux-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      
      # Install dependencies
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-14 llvm-14-dev libclang-14-dev
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi
      
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm@14
          echo "LLVM_SYS_140_PREFIX=$(brew --prefix llvm@14)" >> $GITHUB_ENV
      
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install llvm --version=14.0.6
          echo "LLVM_SYS_140_PREFIX=C:\Program Files\LLVM" | Out-File -FilePath $env:GITHUB_ENV -Append
      
      # Build
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      
      # Create archive
      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          cd ../../..
          shasum -a 256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256
      
      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target\${{ matrix.target }}\release
          7z a ..\..\..\${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          cd ..\..\..
          certutil -hashfile ${{ matrix.asset_name }}.zip SHA256 > ${{ matrix.asset_name }}.zip.sha256
      
      # Upload artifacts
      - name: Upload Release Asset (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          asset_content_type: application/zip
      
      # Upload checksums
      - name: Upload Checksum (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.tar.gz.sha256
          asset_name: ${{ matrix.asset_name }}.tar.gz.sha256
          asset_content_type: text/plain
      
      - name: Upload Checksum (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.asset_name }}.zip.sha256
          asset_name: ${{ matrix.asset_name }}.zip.sha256
          asset_content_type: text/plain

  # Publish to crates.io
  publish-crates:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install LLVM
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-14 llvm-14-dev libclang-14-dev
      - name: Publish crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish in dependency order
          cargo publish -p seen_common --allow-dirty
          cargo publish -p seen_lexer --allow-dirty
          cargo publish -p seen_parser --allow-dirty
          cargo publish -p seen_typechecker --allow-dirty
          cargo publish -p seen_ir --allow-dirty
          cargo publish -p seen_interpreter --allow-dirty
          cargo publish -p seen_compiler --allow-dirty
          cargo publish -p seen_cli --allow-dirty