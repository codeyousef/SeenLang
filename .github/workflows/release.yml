name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short

jobs:
  # Build binaries for all platforms
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x64
            
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: windows-arm64
            
          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x64
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64
            
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x64
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64
            
          - target: riscv64gc-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-riscv64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Rust toolchain
      uses: dtolnay/seen-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        case "${{ matrix.target }}" in
          aarch64-unknown-linux-gnu)
            sudo apt-get install -y gcc-aarch64-linux-gnu
            echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
            ;;
          riscv64gc-unknown-linux-gnu)
            sudo apt-get install -y gcc-riscv64-linux-gnu
            echo "CC_riscv64gc_unknown_linux_gnu=riscv64-linux-gnu-gcc" >> $GITHUB_ENV
            echo "CARGO_TARGET_RISCV64GC_UNKNOWN_LINUX_GNU_LINKER=riscv64-linux-gnu-gcc" >> $GITHUB_ENV
            ;;
        esac

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Build release binaries
      run: |
        seen build --release --target ${{ matrix.target }} --workspace --bin seen

    - name: Build LSP server
      run: |
        seen build --release --target ${{ matrix.target }} --bin seen-lsp
      continue-on-error: true

    - name: Build RISC-V tools
      if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-pc-windows-msvc' || matrix.target == 'x86_64-apple-darwin'
      run: |
        seen build --release --target ${{ matrix.target }} --bin seen-riscv
      continue-on-error: true

    - name: Prepare release assets
      shell: bash
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        if [ -z "$VERSION" ]; then
          VERSION="${{ github.event.inputs.version }}"
        fi
        
        ARCHIVE_NAME="seen-${VERSION}-${{ matrix.name }}"
        
        # Create staging directory
        mkdir -p staging/$ARCHIVE_NAME
        
        # Copy binaries
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/seen.exe staging/$ARCHIVE_NAME/
          [ -f target/${{ matrix.target }}/release/seen-lsp.exe ] && cp target/${{ matrix.target }}/release/seen-lsp.exe staging/$ARCHIVE_NAME/
          [ -f target/${{ matrix.target }}/release/seen-riscv.exe ] && cp target/${{ matrix.target }}/release/seen-riscv.exe staging/$ARCHIVE_NAME/
        else
          cp target/${{ matrix.target }}/release/seen staging/$ARCHIVE_NAME/
          [ -f target/${{ matrix.target }}/release/seen-lsp ] && cp target/${{ matrix.target }}/release/seen-lsp staging/$ARCHIVE_NAME/
          [ -f target/${{ matrix.target }}/release/seen-riscv ] && cp target/${{ matrix.target }}/release/seen-riscv staging/$ARCHIVE_NAME/
        fi
        
        # Copy standard library
        if [ -d "seen_std" ]; then
          cp -r seen_std staging/$ARCHIVE_NAME/stdlib
        fi
        
        # Copy language configurations
        if [ -d "languages" ]; then
          cp -r languages staging/$ARCHIVE_NAME/
        fi
        
        # Copy documentation
        if [ -d "docs" ]; then
          cp -r docs staging/$ARCHIVE_NAME/
        fi
        
        # Copy license and readme
        [ -f "LICENSE" ] && cp LICENSE staging/$ARCHIVE_NAME/
        [ -f "README.md" ] && cp README.md staging/$ARCHIVE_NAME/
        
        # Create archive
        mkdir -p artifacts
        cd staging
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          powershell -Command "Compress-Archive -Path $ARCHIVE_NAME -DestinationPath ../artifacts/${ARCHIVE_NAME}.zip"
        else
          tar -czf ../artifacts/${ARCHIVE_NAME}.tar.gz $ARCHIVE_NAME
        fi
        
        echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Generate checksums
      shell: bash
      run: |
        cd artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          sha256sum ${ARCHIVE_NAME}.zip > ${ARCHIVE_NAME}.zip.sha256
        else
          sha256sum ${ARCHIVE_NAME}.tar.gz > ${ARCHIVE_NAME}.tar.gz.sha256
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}-release
        path: artifacts/
        retention-days: 5

  # Build installers
  build-installers:
    name: Build Installers
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            installer: msi
            name: windows-msi
            
          - os: ubuntu-latest
            installer: deb
            name: linux-deb
            
          - os: ubuntu-latest
            installer: rpm
            name: linux-rpm
            
          - os: ubuntu-latest
            installer: appimage
            name: linux-appimage

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Extract binaries
      shell: bash
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        if [ -z "$VERSION" ]; then
          VERSION="${{ github.event.inputs.version }}"
        fi
        
        mkdir -p target-wsl/release
        
        case "${{ matrix.installer }}" in
          msi)
            cd artifacts/windows-x64-release
            unzip -o seen-${VERSION}-windows-x64.zip
            cp seen-${VERSION}-windows-x64/* ../../target-wsl/release/
            ;;
          deb|rpm|appimage)
            cd artifacts/linux-x64-release
            tar -xzf seen-${VERSION}-linux-x64.tar.gz
            cp seen-${VERSION}-linux-x64/* ../../target-wsl/release/
            chmod +x ../../target-wsl/release/seen*
            ;;
        esac
        
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Install Windows dependencies
      if: matrix.installer == 'msi'
      run: |
        choco install wixtoolset -y
        echo "${env:WIX}bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        case "${{ matrix.installer }}" in
          deb)
            sudo apt-get install -y dpkg-dev build-essential
            ;;
          rpm)
            sudo apt-get install -y rpm
            ;;
          appimage)
            sudo apt-get install -y fuse libfuse2
            ;;
        esac

    - name: Build MSI installer
      if: matrix.installer == 'msi'
      run: |
        cd installer/windows
        .\build.bat ${{ env.VERSION }} x64 --verbose

    - name: Build DEB package
      if: matrix.installer == 'deb'
      run: |
        cd installer/linux
        ./build-deb.sh ${{ env.VERSION }} amd64 --verbose

    - name: Build RPM package
      if: matrix.installer == 'rpm'
      run: |
        cd installer/linux
        ./build-rpm.sh ${{ env.VERSION }} x86_64 --verbose

    - name: Build AppImage
      if: matrix.installer == 'appimage'
      run: |
        cd installer/linux
        ./build-appimage.sh ${{ env.VERSION }} x86_64 --verbose

    - name: Upload installer artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: |
          installer/*/output/
        retention-days: 5

  # Generate package manager manifests
  package-manifests:
    name: Generate Package Manifests
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        if [ -z "$VERSION" ]; then
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Generate Homebrew formula
      run: |
        cd installer/homebrew
        ./generate-formula.sh --version ${{ env.VERSION }} --verbose

    - name: Generate Scoop manifest
      run: |
        cd installer/scoop
        pwsh ./generate-manifest.ps1 -Version ${{ env.VERSION }} -Verbose

    - name: Upload package manifests
      uses: actions/upload-artifact@v4
      with:
        name: package-manifests
        path: |
          installer/homebrew/seen-lang-*.rb
          installer/scoop/seen-lang-*.json
        retention-days: 30

  # Create GitHub release
  release:
    name: Create Release
    needs: [build, build-installers, package-manifests]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version and changelog
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        if [ -z "$VERSION" ]; then
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        # Create release notes
        echo "## Seen Language $VERSION" > release_notes.md
        echo "" >> release_notes.md
        echo "High-performance systems programming language release." >> release_notes.md
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "**Universal installer:**" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "curl -sSL https://install.seen-lang.org | bash" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "**Windows:**" >> release_notes.md
        echo '```powershell' >> release_notes.md
        echo "iwr https://install.seen-lang.org/install.ps1 | iex" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "**Package managers:**" >> release_notes.md
        echo "- Homebrew: \`brew install seen-lang\`" >> release_notes.md
        echo "- Scoop: \`scoop install seen-lang\`" >> release_notes.md
        echo "- APT: \`sudo apt install ./seen-lang_${VERSION}_amd64.deb\`" >> release_notes.md
        echo "- RPM: \`sudo rpm -i seen-lang-${VERSION}-1.x86_64.rpm\`" >> release_notes.md

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-assets/

    - name: Prepare release assets
      run: |
        find release-assets -type f \( -name "*.zip" -o -name "*.tar.gz" -o -name "*.deb" -o -name "*.rpm" -o -name "*.msi" -o -name "*.AppImage" -o -name "*.sha256" \) -exec cp {} . \;
        ls -la

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.VERSION }}
        name: Seen Language v${{ env.VERSION }}
        body_path: release_notes.md
        draft: ${{ github.event.inputs.draft }}
        prerelease: false
        files: |
          *.zip
          *.tar.gz
          *.deb
          *.rpm
          *.msi
          *.AppImage
          *.sha256
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to package repositories
  publish:
    name: Publish to Package Repos
    needs: release
    runs-on: ubuntu-latest
    if: success() && !github.event.inputs.draft
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download package manifests
      uses: actions/download-artifact@v4
      with:
        name: package-manifests
        path: manifests/

    - name: Publish to Homebrew (if configured)
      if: vars.HOMEBREW_TAP_REPO != ''
      env:
        HOMEBREW_GITHUB_TOKEN: ${{ secrets.HOMEBREW_GITHUB_TOKEN }}
      run: |
        if [ -n "$HOMEBREW_GITHUB_TOKEN" ]; then
          echo "Publishing to Homebrew tap..."
          git clone https://x-access-token:$HOMEBREW_GITHUB_TOKEN@github.com/${{ vars.HOMEBREW_TAP_REPO }}.git tap
          cp manifests/seen-lang-*.rb tap/Formula/seen-lang.rb
          
          cd tap
          git config user.name "Seen Language Bot"
          git config user.email "bot@seen-lang.org"
          git add Formula/seen-lang.rb
          git commit -m "Update seen-lang to v${{ env.VERSION }}"
          git push
        fi

    - name: Publish to Scoop (if configured)
      if: vars.SCOOP_BUCKET_REPO != ''
      env:
        SCOOP_GITHUB_TOKEN: ${{ secrets.SCOOP_GITHUB_TOKEN }}
      run: |
        if [ -n "$SCOOP_GITHUB_TOKEN" ]; then
          echo "Publishing to Scoop bucket..."
          git clone https://x-access-token:$SCOOP_GITHUB_TOKEN@github.com/${{ vars.SCOOP_BUCKET_REPO }}.git bucket
          cp manifests/seen-lang-*.json bucket/bucket/seen-lang.json
          
          cd bucket
          git config user.name "Seen Language Bot"
          git config user.email "bot@seen-lang.org"
          git add bucket/seen-lang.json
          git commit -m "Update seen-lang to v${{ env.VERSION }}"
          git push
        fi

    - name: Notify completion
      run: |
        echo "🎉 Release v${{ env.VERSION }} published successfully!"
        echo "📦 All installers and packages are now available"
        echo "🌐 Package managers will be updated shortly"